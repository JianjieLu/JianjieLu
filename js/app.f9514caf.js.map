{"version":3,"file":"js/app.f9514caf.js","mappings":"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","sources":["webpack://Blog/./src/components/topMenu.vue","webpack://Blog/./src/App.vue","webpack://Blog/./src/components/learn/live2d/live2d.vue","webpack://Blog/./src/components/learn/live2d/live2d.vue?5dec","webpack://Blog/./src/components/learn/others/totop.vue","webpack://Blog/./src/components/learn/others/totop.vue?76c7","webpack://Blog/./src/components/leftMenu_post.vue","webpack://Blog/./src/components/leftMenu_post.vue?71b9","webpack://Blog/./src/views/postlearn.vue","webpack://Blog/./src/components/postlearn/linux/quick.vue","webpack://Blog/./src/components/postlearn/linux/quick.vue?2975","webpack://Blog/./src/components/postlearn/linux/vpn.vue","webpack://Blog/./src/components/postlearn/linux/vpn.vue?6e82","webpack://Blog/./src/components/postlearn/ros/intro.vue","webpack://Blog/./src/components/postlearn/ros/intro.vue?bd38","webpack://Blog/./src/components/postlearn/ros/construce2.vue","webpack://Blog/./src/components/postlearn/ros/construce2.vue?9f6b","webpack://Blog/./src/components/postlearn/ros/construce.vue","webpack://Blog/./src/components/postlearn/ros/construce.vue?2aef","webpack://Blog/./src/components/postlearn/ros/operations.vue","webpack://Blog/./src/components/postlearn/ros/operations.vue?9148","webpack://Blog/./src/components/postlearn/ros/roscases.vue","webpack://Blog/./src/components/postlearn/ros/roscases.vue?8024","webpack://Blog/./src/components/postlearn/ros/rosreality.vue","webpack://Blog/./src/components/postlearn/ros/rosreality.vue?68d9","webpack://Blog/./src/components/postlearn/ros/machine_ros/move.vue","webpack://Blog/./src/components/postlearn/ros/machine_ros/move.vue?d529","webpack://Blog/./src/components/postlearn/ros/machine_ros/pcl.vue","webpack://Blog/./src/components/postlearn/ros/machine_ros/pcl.vue?e826","webpack://Blog/./src/router/index.js","webpack://Blog/./src/main.js","webpack://Blog/webpack/bootstrap","webpack://Blog/webpack/runtime/chunk loaded","webpack://Blog/webpack/runtime/compat get default export","webpack://Blog/webpack/runtime/define property getters","webpack://Blog/webpack/runtime/global","webpack://Blog/webpack/runtime/hasOwnProperty shorthand","webpack://Blog/webpack/runtime/make namespace object","webpack://Blog/webpack/runtime/node module decorator","webpack://Blog/webpack/runtime/publicPath","webpack://Blog/webpack/runtime/jsonp chunk loading","webpack://Blog/webpack/startup"],"sourcesContent":["import script from \"./topMenu.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./topMenu.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./topMenu.vue?vue&type=style&index=0&id=01fcc40f&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./App.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./App.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=4ec84822&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n    <canvas ref=\"liveCanvas\" style=\"position:absolute;left:1500px;top:260px;\"></canvas>\r\n</template>\r\n\r\n<script>\r\n    import * as PIXI from 'pixi.js';\r\n    import { beforeUnmount } from 'vue';\r\n    import { Live2DModel } from 'pixi-live2d-display/cubism4';\r\n    window.PIXI = PIXI; // 为了pixi-live2d-display内部调用\r\n    let app; // 为了存储pixi实例\r\n    let model; // 为了存储live2d实例\r\n    export default {\r\n        async mounted(){\r\n            app = new PIXI.Application({\r\n                view: this.$refs.liveCanvas,\r\n                autoStart: true,\r\n                resizeTo: window,\r\n                backgroundAlpha: 0,\r\n            });\r\n            // static/live2dw/model/naxidaqwq.model3.json\r\n            // static/live2dw/model/MissBai.model3.json\r\n            // static/live2dw/model/Nahida_1080/Nahida_1080.model3.json\r\n            //static/live2dw/runtime/hiyori_pro_t11.model3.json\r\n            model = await Live2DModel.from('static/live2dw/model/Nahida_1080/Nahida_1080.model3.json');\r\n            // draggable(model);\r\n            app.stage.addChild(model);\r\n            model.scale.set(0.05); // 调整缩放比例，一般原始资源尺寸非常大，需要缩小\r\n            var hitAreas = model.internalModel.hitAreas;\r\n            model.y=200\r\n            model.on(\"pointerdown\", (hitAreas)=>{\r\n                // e 包含点击的区域和鼠标坐标\r\n                const { x, y } = hitAreas.data.global \r\n                const point = model.hitTest(x, y)\r\n                console.log('1')\r\n                model.expression(\"kuku\");\r\n            });\r\n           }\r\n// ,\r\n\r\n//         beforeUnmount(){\r\n//             model?.destroy();\r\n//             app?.destroy();\r\n//         }\r\n    }\r\n\r\n\r\n//     function draggable(model) {\r\n//         model.buttonMode = true;\r\n//         model.on(\"pointerdown\", (e) => {\r\n//         model.dragging = true;\r\n//         model._pointerX = e.data.global.x - model.x;\r\n//         model._pointerY = e.data.global.y - model.y;\r\n//         });\r\n\r\n//         model.on(\"pointermove\", (e) => {\r\n//         if (model.dragging) {\r\n//             model.position.x = e.data.global.x - model._pointerX;\r\n//             model.position.y = e.data.global.y - model._pointerY;\r\n//         }\r\n//         });\r\n//         model.on(\"pointerupoutside\", () => (model.dragging = false));\r\n//         model.on(\"pointerup\", () => (model.dragging = false));\r\n//   }\r\n\r\n    // 绑定模型拖拽方法\r\n    </script>","import { render } from \"./live2d.vue?vue&type=template&id=cedf352a\"\nimport script from \"./live2d.vue?vue&type=script&lang=js\"\nexport * from \"./live2d.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n<el-button plain @click=\"bac\" type=\"default\"   style=\"z-index: 1000; position: fixed; top: 700px; right: 100px; border-radius: 50%; width: 50px;height: 50px;\" ><el-icon><Top /></el-icon></el-button>\r\n    </template>\r\n    <script setup>\r\n    import {\r\n   Top\r\n  } from '@element-plus/icons-vue'\r\n  function bac(){\r\n  document.body.scrollTop = 0\r\ndocument.documentElement.scrollTop = 0\r\n}\r\n    </script>\r\n    <style  scoped>\r\n    </style>","import script from \"./totop.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./totop.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n<!-- :default-openeds=\"arr.start\" -->\r\n        <el-menu\r\n            :router=\"true\"\r\n            class=\"scoped el-menu-demo\"\r\n           active-text-color=\"#ffd04b\"\r\n default-active=\"/postlearn/quick\"  \r\n        >\r\n          <el-sub-menu index=\"1\">\r\n            <template #title>\r\n              <el-icon><icon-menu /></el-icon>\r\n              <span><strong>基础</strong></span>\r\n            </template>\r\n            <!-- <el-menu-item index=\"/postlearn/hbase\"><el-icon><Coin /></el-icon>hbase</el-menu-item>\r\n            <el-menu-item index=\"/postlearn/hbase_start\"><el-icon><Coin /></el-icon>hbase起始与配置</el-menu-item>\r\n            <el-menu-item index=\"/postlearn/hbasebase\"><el-icon><Coin /></el-icon>hbase基础操作</el-menu-item> -->\r\n            <el-menu-item index=\"/postlearn/quick\"><el-icon><CollectionTag /></el-icon>linux快捷键</el-menu-item>\r\n            <el-menu-item index=\"/postlearn/vpn\"><el-icon><CollectionTag /></el-icon>linux中科学search</el-menu-item>\r\n            <!-- <el-menu-item index=\"/postlearn/ogeintro\"><el-icon><MapLocation /></el-icon>oge介绍</el-menu-item> -->\r\n            <el-menu-item index=\"/postlearn/rosintro\"><el-icon><Cpu /></el-icon>ROS介绍</el-menu-item>\r\n            <el-menu-item index=\"/postlearn/construce\"><el-icon><Cpu /></el-icon>ROS构建1</el-menu-item>\r\n            <el-menu-item index=\"/postlearn/construce2\"><el-icon><Cpu /></el-icon>ROS构建2</el-menu-item>\r\n            <el-menu-item index=\"/postlearn/operations\"><el-icon><Cpu /></el-icon>ROS操作</el-menu-item>\r\n            <el-menu-item index=\"/postlearn/roscases\"><el-icon><Cpu /></el-icon>ROS案例</el-menu-item>\r\n            <el-menu-item index=\"/postlearn/rosreality\"><el-icon><Cpu /></el-icon>ROS实操</el-menu-item>\r\n            <el-menu-item index=\"/postlearn/move\"><el-icon><Cpu /></el-icon>ROSSOROOOOO</el-menu-item>\r\n            <el-menu-item index=\"/postlearn/pcl\"><el-icon><Cpu /></el-icon>ROS+PCL</el-menu-item>\r\n          </el-sub-menu>\r\n\r\n        </el-menu>\r\n\r\n  </template>\r\n  \r\n  <script setup>\r\n// import live2d from './learn/live2d/live2d.vue';\r\n\r\n  import {\r\n    HelpFilled,\r\n    Monitor,\r\n    Compass,\r\n    TrendCharts,\r\n    Menu as IconMenu,\r\n    Setting,\r\n    Coin,\r\n    MapLocation,\r\nCpu,\r\nCollectionTag\r\n  } from '@element-plus/icons-vue'\r\nimport { reactive } from 'vue';\r\nvar arr=reactive({start:[\"1\"]})\r\n  </script>\r\n  <style scoped>\r\n.scoped .el-menu-item {font-size: 13px;}\r\n.el-menu-demo .el-menu-item:hover .el-sub-menu:hover {\r\n  background-color: #fff !important; /* 修改为你想要的颜色 */\r\n}\r\n \r\n</style>","import script from \"./leftMenu_post.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./leftMenu_post.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./leftMenu_post.vue?vue&type=style&index=0&id=5b126e97&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-5b126e97\"]])\n\nexport default __exports__","import script from \"./postlearn.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./postlearn.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n    <el-card style=\"max-width: 1200px\">\r\n        <template #header><strong>快捷键</strong></template>\r\n    ctrl+alt+ &nbsp;t&nbsp;&nbsp;：打开终端<br/>\r\n    ctrl+shift+ &nbsp;+&nbsp;&nbsp;：终端放大<br/>\r\n      </el-card>\r\n      <el-divider></el-divider>\r\n      <el-card style=\"max-width: 1200px\">\r\n        <template #header><strong>终端指令</strong></template>\r\n        1、安装应用：<br/>\r\n        在下载好deb文件之后，sudo dpkg -i hello.deb，之后应用可以在左下角菜单→全部中打开<br/>\r\n        取消安装：sudo apt-get remove XXXXX<br/>\r\n\r\n        2、Vim：<br/>\r\n        ①首先sudo apt-get install vim。<br/>\r\n        ②输入vim ~/Downloads/m.txt进入vim编辑界面,直接就可以输入了。<br/>\r\n        ③编辑完成后，点击Esc退出编辑模式，然后输入「shift + ;」, 其实就是输入「:」，来进入「末行模式]<br/>\r\n        ④输入wq再enter就是保存并退出，q！就是不保存并退出，w就是保存文件。<br/>\r\n        Vim中撤销上一处修改：先进入「末行模式]，然后u。<br/>\r\n\r\n        3、解压：把JDK文件解压到/usr/lib/jvm目录下：<br/>\r\n    <highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code\"></highlightjs>\r\n        4、gedit的使用：<br/>\r\n        进入到文件所在的文件夹，然后gedit XXX，回车后就可以编辑了。<br/>\r\n\r\n      </el-card>\r\n    \r\n    </template>\r\n    <script setup>\r\n    var code=`cd Downloads\r\nsudo tar -zxvf ./jdk-8u162-linux-x64.tar.gz -C /usr/lib/jvm\r\n \r\n##解压各种压缩包用的指令：\r\ntar -xvf filename.tar\r\ntar -zxvf filename.tar.gz\r\ntar -zxvf filename.tgz\r\ntar -jxvf filename.tar.bz2\r\ntar -xZvf filename.tar.Z\r\nunrar e filename.rar # 解压到当前目录\r\nunrar x filename.rar /path/to/extract \r\nunzip filename.zip -d filepath`\r\n    </script>\r\n    <style  scoped>\r\n    \r\n    </style>","import script from \"./quick.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./quick.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n    <el-button plain @click=\"cli\">show</el-button>\r\n    <el-card style=\"max-width: 1200px\" v-show=\"choose.se\">\r\n      <template #header><strong>标题</strong></template>\r\n     linux设置vpn：<br/><a href=\"https://www.freeclashnode.com/free-node/2024-3-4-free-v2ray.htm\" _target=\"blank\">机场页面</a>\r\n     <br/>\r\n     <a href=\"https://www.fccloud2.com/\" _target=\"blank\">主页面</a>\r\n     <br/>\r\n     点击clash订阅来获取url<br/>\r\n     在<a href=\"https://github.com/clash-verge-rev/clash-verge-rev/releases\" _target=\"blank\">此网址</a>中下载amd64.deb的文件<br/>\r\n     <br/>\r\n    下载，安装，把刚刚的url移入，再在设置中打开系统代理即可<br/>\r\n    </el-card>\r\n    </template>\r\n    <script setup>\r\n    import {reactive}from 'vue'\r\n    var choose=reactive({se:false})\r\n    function cli(){\r\n        console.log(choose.se)\r\n        choose.se=true\r\n        console.log(choose.se)\r\n    }\r\n    </script>\r\n    <style  scoped>\r\n    </style>","import script from \"./vpn.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./vpn.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n    <el-card style=\"max-width: 1200px\">\r\n        <template #header><strong>ROS介绍</strong></template>\r\n    目标：提高机器人研发中的软件复用率<br/><br/>\r\n    特点：<br/>1、点对点的设计：一个功能就是一个节点。用来提高软件的复用<br/>\r\n    2、多语言支持：每一个节点都是一个功能，分别可以使用不同的编程语言进行编程，如C++、Python、Java等编程语言<br/>\r\n    3、架构精简，集成度高<br/>\r\n    4、组件化工具包丰富：有恒多仿真界面工具如rviz，仿真环境gazebo，rqt_plot图形化显示工具<br/>\r\n    5、免费并且开源<br/><br/>\r\n    四位一体：ROS=通讯机制+开发工具+应用功能+生态系统<br/><br/>\r\n通讯机制：点对点通讯。通讯方式为两种：话题和服务通讯。话题：发布订阅模式，异步无反馈，服务：请求相应模式，同步有反馈<br/>\r\n开发工具：rviz等<br/>\r\n应用功能：功能与节点不同。功能可以理解为是一个大功能，节点是小功能<br/>\r\n生态系统：ROS不是一个单独的软件，他所在的环境有各个大牛人、公司。<br/><br/><br/><br/>\r\n\r\n节点（Nodes）：节点是一个可执行文件，它可以通过ROS来与其他节点进行通信。<br/>\r\n消息（Messages）：订阅或发布话题时所使用的ROS数据类型。<br/>\r\n话题（Topics）：节点可以将消息发布到话题，或通过订阅话题来接收消息。<br/>\r\n主节点（Master）：ROS的命名服务，例如帮助节点发现彼此。<br/>\r\nrosout：在ROS中相当于stdout/stderr（标准输出/标准错误）。<br/>\r\nroscore：主节点 + rosout + 参数服务器（会在以后介绍）。<br/><br/>\r\n\r\n\r\nROS节点使用ROS客户端库与其他节点通信<br/><br/>\r\n\r\nROS客户端库可以让用不同编程语言编写的节点进行相互通信：<br/>\r\nrospy = Python客户端库<br/>\r\nroscpp = C++客户端库<br/><br/><br/>\r\n\r\n理解ROS服务和参数<br/><br/><br/>\r\n\r\n\r\n\r\n<img src=\"../../../assets/pics/ros/struct.jpg\"><br/>\r\nworkspace:自定义的工作空间<br/>\r\nsrc：源码<br/>\r\npackage ：功能包（ ROS 基本里元）包含多个节点、库与配置文件，包名所有字母小与，只能由字母、数字<br/>\r\ncMakelists . txt 配置编译规则，比如源文件、依赖项、目标文件<br/>\r\npackage . xml 包信息，比如：包名、版本、作者、依赖项．..（以前版本是 manifest . xml )<br/>\r\n|-- scripts 存储 python 文件<br/>\r\n l -- src 存储 C +＋源文件<br/>\r\n|-- include 头文件<br/>\r\n l -- msg 消息通信格式文件<br/>\r\n|-- srv 服务通格式文件 <br/>l -- action 动作格式文件<br/>-- launch 可一次性运行多个节点<br/>\r\n-- config 配置信息<br/>\r\n|-- CMakeLists . txt ：编译的基本配置<br/><br/><br/>\r\n\r\nROS角色：<br/>\r\n1、master-----管理者  管理匹配话题   可以根据话题建立发布者和订阅者之间的连接<br/>\r\n2、talker-----发布者<br/>\r\n3、listener---订阅者<br/><br/>\r\n\r\na、talker广播自己有什么<br/>\r\nb、listener发布自己想要什么<br/>\r\nc、master按对应的将talker推给listener<br/>\r\nd、listener向talker发起连接请求<br/>\r\ne、talker响应同意请求<br/>\r\nf、listener成功与talker连接<br/>\r\ng、talker向listener发布消息<br/><br/>\r\n\r\n注意：<br/>\r\n1、使用的协议有RPC和TCP<br/>\r\n2、步骤0和步骤1没有顺序关系<br/>\r\n3、talker和listener都可以存在多个<br/>\r\n4、talker和listener建立连接后，master就可以关闭了<br/>\r\n5、上述实现流程已经封装了，以后直接调用即可<br/>\r\n\r\n</el-card>\r\n<el-card style=\"max-width: 1200px\">\r\n\r\n<template #header><strong>安装</strong></template>\r\n    参看文章：<br/>\r\n \r\n    <a href=\"https://blog.csdn.net/weixin_43994864/article/details/119703789\" _target=\"blank\">Ubuntu20.04系统安装Livox ROS Driver</a><br/>\r\n    <a href=\"https://blog.csdn.net/willhu2008/article/details/122928163\" _target=\"blank\">Ubuntu20.04系统安装ROS</a><br/>\r\n    <a href=\"https://blog.csdn.net/qq_40185784/article/details/129477577\" _target=\"blank\">ubuntu20.04中安装ROS系统，详细介绍各种错误解决方法，直达小海龟</a><br/>\r\n    <a href=\"https://blog.csdn.net/m0_61780496/article/details/129912943\" _target=\"blank\">安装ROS遇到的报错以及解决方法</a><br/><br/>\r\n下载前一定要sudo apt-get update、sudo apt-get upgrade，再sudo apt install ros-melodic-desktop-full<br/><br/>\r\n安装时出现E: Unable to locate package ros-noetic-desktop-full的<a href=\"https://blog.csdn.net/willhu2008/article/details/122928163\" _target=\"blank\">解决方式</a><br/>\r\n<a href=\"https://blog.csdn.net/qq_43509129/article/details/110872894\" _target=\"blank\">catkin_make时找不到命令</a><br/>\r\n首先确保ROS和Livox-SDK安装之后，再下载ws_linux文件git clone https://github.com/Livox-SDK/livox_ros_driver.git ws_livox/src<br/>\r\n再开始构建livox_ros_driver<br/>\r\ncd ws_livox<br/>\r\ncatkin_make<br/>\r\n最后source ./devel/setup.sh，完成Livox ROS Driver的安装<br/><br/>\r\n</el-card>\r\n</template>\r\n<script setup>\r\n    \r\n</script>\r\n<style  scoped>\r\n    \r\n</style>","import { render } from \"./intro.vue?vue&type=template&id=821de13e\"\nconst script = {}\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n<el-card style=\"max-width: 1200px\">\r\n  <template #header><strong>launch文件</strong></template>\r\n  由于一个程序中可能要启动多个节点，比如小乌龟，要启动roscore、乌龟界面节点、键盘控制节点。如何优化？launch文件！<br/>\r\n  实现：<br/>\r\n  1、选定功能包（这里是hello_vscode下）右击新建文件夹launch<br/>\r\n  2、创建start_turtle.launch<br/>\r\n  3、写入内容:<br/>\r\n  <highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code1\"></highlightjs>\r\n\r\n  4、在demo2_ws文件夹terminal下roslaunch hello_vscode start_turtle.launch<br/>\r\n  5、添加刚刚写的hello_vscode_c：\r\n  <highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code2\"></highlightjs>\r\n</el-card>\r\n</template>\r\n<script setup>\r\nvar code1=`<launch>\r\n  <!--添加被执行的节点-->\r\n  <!--乌龟GUI 这里turtlesim是包名，turtlesim_node是节点名-->\r\n  <node pkg=\"turtlesim\" type=\"turtlesim_node\" name=\"turtle_GUI\"></node>\r\n  <node pkg=\"turtlesim\" type=\"turtle_teleop_key\" name=\"turtle_key\"></node>\r\n</launch>`\r\nvar code2=`<node pkg=\"hello_vscode\" type=\"hello_vscode_c\" name=\"hello\"></node>`\r\nvar code3=``\r\nvar code4=``\r\nvar code5=``\r\nvar code6=``\r\nvar code7=``\r\nvar code8=``\r\nvar code9=``\r\nvar code10=``\r\n</script>\r\n<style  scoped>\r\n</style>","import script from \"./construce2.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./construce2.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n    <el-card style=\"max-width: 1200px\">\r\n    \r\n\r\nROS中编写程序步骤：<br/>\r\n1、先创建一个工作空间<br/>\r\n2、再创建一个功能包<br/>\r\n3、编辑源文件<br/>\r\n4、编辑配置文件<br/>\r\n5、编译并执行<br/><br/>\r\n不同语言（C++、python）只是在3、4步骤上细节存在差异，其他流程基本一致<br/>\r\n\r\n一个catkin软件包有什么组成：必须有一个package.xml文件，提供有关该软件包的元信息<br/>\r\n必须有一个CMakeLists.txt文件。每个包必须有自己的目录，即同一个目录下不能有嵌套的或者多个软件包存在<br/>\r\n最简单的软件包就像：my_package/<br/>\r\nCmakeLists.txt<br/>\r\npackage.xml<br/>\r\nCMakeLists.txt在~/catkin_ws/src下，package.xml 在/catkin_ws/src/beginner_tutorials下<br/><br/>\r\n\r\n\r\ncatkin路径：/Downloads/livox_ros_driver-master/ws_livox/catkin<br/><br/>\r\n\r\n\r\n构建软件包：<br/>\r\n首先建文件夹  mkdir -p ~/catkin_ws/src<br/>\r\n进入文件夹cd ~/catkin_ws/<br/>\r\n再catkin_make<br/>\r\nsource devel/setup.bash<br/>\r\ncd ~/catkin_ws/src<br/>\r\n使用catkin_create_pkg命令创建一个名为beginner_tutorials的新软件包，这个软件包依赖于std_msgs、roscpp和rospy：<br/>\r\ncatkin_create_pkg beginner_tutorials std_msgs rospy roscpp<br/>\r\n到此，前两部完成。接下来是3、4部。<br/>\r\nC++：进入/catkin_ws/src/beginner_tutorials/src，新建一个文档helloworld_c.cpp，双击打开，编写源代码。<br/>\r\n<br/>\r\n<highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code1\"></highlightjs>\r\n\r\n即：\r\n<highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code2\"></highlightjs>\r\n\r\n更改/catkin_ws/src/beginner_tutorials/CMakeLists.txt:<br/>\r\n查找add_executable，改为add_executable(haha src/helloworld_c.cpp)，haha为别名，src/helloworld_c.cpp为刚刚写的代码<br/>\r\n然后下面还有：<br/>\r\ntarget_link_libraries(haha<br/>\r\n${catkin_LIBRARIES}<br/>\r\n)<br/>\r\n\r\n\r\n\r\n再进入~/catkin_ws，运行命令catkin_make。<br/>\r\n要运行haha，先再开一个终端，运行roscore，再在~/catkin_ws下运行source ./devel/setup.bash<br/>\r\n再运行rosrun beginner_tutorials haha，<br/>beginner_tutorials为包名，haha为刚才取的别名，就可以得到。<br/>\r\n<br/><br/>\r\n接下来自定义软件包<br/>\r\n先自定义package.xml<br/><br/><br/>\r\n\r\n运行所有ROS程序前都要首先运行命令roscore<br/>\r\n\r\n接着再打开一个新终端，可以使用rosnode list显示正在运行的ROS节点信息（看到有rosout在运行）\r\n再输入rosnode info /rosout来看到关于rosout更多信息<br/><br/>\r\n这里，catkin_ws：工作空间，beginner_tutorials：包名，haha(helloworld_c.cpp)：C++节点<br/><br/><br/><br/>\r\n然后是python：<br/>\r\n进入/catkin_ws/src/beginner_tutorials/，与src同级新建一个文件夹scripts，进入scripts，新建helloworld_p.py<br/>\r\n  写入内容：<br/>\r\n  <highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code3\"></highlightjs>\r\n\r\n即：\r\n<highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code4\"></highlightjs>\r\n\r\n\r\n然后给他添加可执行权限。在终端中打开scripts,执行chmod +x helloworld_p.py<br/>\r\n回到~/catkin_ws/src/beginner_tutorials，编辑CMakeLists.txt<br/>\r\n把catkin_install_python(PROGRAMS<br/>\r\n  scripts/my_python_script<br/>\r\n  DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}<br/>\r\n)<br/>\r\n这段解除注释，改为<br/>\r\ncatkin_install_python(PROGRAMS<br/>\r\n  scripts/helloworld_p.py<br/>\r\n  DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}<br/>\r\n)<br/>\r\n然后就可以编译执行了，先进入~/catkin_ws,打开终端，先执行catkin_make,再执行source ./devel/setup.bash，再rosrun beginner_tutorials helloworld_p.py<br/>\r\n<br/><br/><br/><br/>\r\n\r\n使用rosrun可以让你用包名直接运行软件包内的节点<br/>\r\n例如：rosrun turtlesim turtlesim_node，再开一个新窗口运行rosrun turtlesim turtle_teleop_key<br/><br/><br/><br/>\r\n\r\n\r\n\r\n\r\n在code中构建，C++：<br/>\r\nmkdir -p demo2_ws/src<br/>\r\ncd demo2_ws<br/>\r\ncode .<br/>\r\n之后就会出现code的UI界面<br/>\r\ncd进入demo2_ws,catkin_make一下<br/>\r\n点击ctrl+shift+b，点击catkin_make:build右侧的齿轮<br/>\r\n改为<br/>\r\n<highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code5\"></highlightjs><br/>\r\n保存后关闭,再次点击ctrl+shift+b就会进行编译。下一步就是编写ros功能包<br/>\r\n右键src选择create catkin package，输入hello_vscode后回车，再输入roscpp rospy std_msgs再回车。<br/>\r\n再次ctrl+shift+b一下，如果没错就是正常的<br/>\r\n以上就是功能包的创建，接下来就是编写c++或者python文件了。先以C++为例：<br/>\r\n打开c_cpp_properties.json,把这句话改成 \"cppStandard\": \"c++17\"<br/>\r\n在src下创建hello_vscode_c.cpp,写入内容：有报错先不要紧<br/>\r\n<highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code6\"></highlightjs><br/>\r\n再修改和src平级的CMakeLists.txt，<br/>\r\nadd_executable(${PROJECT_NAME}_node src/hello_vscode_node.cpp)和<br/>\r\ntarget_link_libraries(${PROJECT_NAME}_node<br/>\r\n  ${catkin_LIBRARIES}<br/>\r\n)<br/>\r\n改为add_executable(hello_vscode_c src/hello_vscode_c.cpp)和<br/>\r\ntarget_link_libraries(hello_vscode_c<br/>\r\n  ${catkin_LIBRARIES}<br/>\r\n)<br/>\r\n,再进入hello_vscode_c.cpp，ctrl+shift+b一下。<br/>\r\n新建一个终端，执行roscore，再新建一个终端，输入source ./devel/setup.bash，再rosrun hello_vscode hello_vscode_c就输出了<br/>\r\n解决中文乱码问题：在ros::init(argc,argv,\"hello_node\");之上再加一句setlocale(LC_ALL,\"\");<br/><br/><br/>\r\n\r\n然后是python文件：\r\n首先在src目录下创建scripts文件夹，在创建hello_vscode_p.py，写入代码：\r\n<highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code7\"></highlightjs><br/>\r\n\r\n然后右键scripts，选择在终端中打开，再chmod +x *.py\r\n再修改和src平级的CMakeLists:\r\n把catkin_install_python(PROGRAMS<br/>\r\n  scripts/my_python_script<br/>\r\n  DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}<br/>\r\n)<br/>\r\n这段解除注释，改为<br/>\r\ncatkin_install_python(PROGRAMS<br/>\r\n  scripts/hello_vscode_p.py<br/>\r\n  DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}<br/>\r\n)<br/>\r\n然后就可以编译执行了，<br/>先ctrl+shift+b，<br/>再新建一个terminal，执行roscore，<br/>再在demo2_ws文件夹中source ./devel/setup.bash，<br/>再rosrun hello_vscode hello_vscode_p.py<br/><br/><br/>\r\n新建一个python文件之后，不想改CMakeLists文件，可以在东西都搞好之后，执行sudo ln -s /usr/bin/python3 /usr/bin/python\r\n\r\n<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</el-card>\r\n\r\n\r\n    </template>\r\n    <script setup>\r\n    var code1=`1、包含ros的头文件\r\n#include \"ros/ros.h\"\r\n2、编写main函数\r\nint main(int argc,char *argv[]){\r\n    3、初始化ros节点\r\n    ros::init(argc,argv,\"hello_node\");\r\n    4、输出日志\r\n    ROS_INFO(\"hello world!\");\r\n    return 0;\r\n}`\r\n    var code2=`#include \"ros/ros.h\"\r\nint main(int argc,char *argv[]){\r\n    ros::init(argc,argv,\"hello_node\");\r\n    ROS_INFO(\"hello world!\");\r\n    return 0;\r\n}`\r\n    var code3=`##指定解释器\r\n#! /usr/bin/env python\r\n#1、导包\r\nimport rospy\r\n#2、编写主入口\r\nif __name__==\"__main__\":\r\n#3、初始化 ROS 节点\r\nrospy.init_node(\"hello_p\");\r\n#4、输出日志\r\nrospy.loginfo(\"hello world! I am python\");`\r\n    var code4=`#! /usr/bin/env python\r\nimport rospy\r\nif __name__==\"__main__\":\r\n    rospy.init_node(\"hello_p\");\r\n    rospy.loginfo(\"hello world! I am python\");`\r\n    var code5=`{\r\n\t\"version\": \"2.0.0\",\r\n\t\"tasks\": [\r\n\t\t{\r\n\t\t\t\"type\": \"shell\",\r\n\t\t\t\"args\": [\r\n\t\t\t\t\"--directory\",\r\n\t\t\t\t\"/home/ljj/demo2_ws\",\r\n\t\t\t\t\"-DCMAKE_BUILD_TYPE=RelWithDebInfo\"\r\n\t\t\t],\r\n\t\t\t\"problemMatcher\": [\r\n\t\t\t\t\"$msCompile\"\r\n\t\t\t],\r\n\t\t\t\"presentation\":{\"reveal\":\"always\"},\r\n\t\t\t\"command\":\"catkin_make\",\r\n\t\t\t\"group\": {\"kind\":\"build\",\"isDefault\":true},\r\n\t\t\t\"label\": \"catkin_make: debug\"\r\n\t\t}\r\n\t]\r\n}`\r\nvar code6=`#include \"ros/ros.h\"\r\nint main(int argc,char *argv[]){\r\n    ros::init(argc,argv,\"hello_node\");\r\n    ROS_INFO(\"hahaha!\");\r\n    return 0;\r\n}`\r\nvar code7=`#! /usr/bin/env python\r\n#1、导包\r\nimport rospy\r\n#2、编写主入口\r\nif __name__==\"__main__\":\r\n    #3、初始化 ROS 节点\r\n    rospy.init_node(\"hello_p\");\r\n    #4、输出日志\r\n    rospy.loginfo(\"hello world!这是Python\");#python中不会有中文乱码问题`\r\nvar code8=`#include \"ros/ros.h\"\r\n#include \"std_msgs/String.h\"\r\n#include<sstream>\r\n/*\r\n    发布方实现：\r\n        1、包含头文件\r\n        2、初始化ROS节点\r\n        3、创建节点句柄\r\n        4、创建发布者对象\r\n        5、编写发布逻辑并发布数据\r\n*/\r\nint main(int argc,char *argv[]){\r\n    setlocale(LC_ALL,\"\");\r\n    //3、初始化ros节点\r\n    ros::init(argc,argv,\"erGouZi\");\r\n    //3、创建节点句柄\r\n    ros::NodeHandle nh;\r\n    //4、创建发布者对象\r\n    ros::Publisher pub = nh.advertise<std_msgs::String>(\"fangzi\",10);//可以通过rostopic echo fangzi 来查看发布的话题\r\n    //5、编写发布逻辑并发布数据\r\n    //要求以10HZ的频率发布数据，并且文本后添加编号\r\n    //先创建被发布的消息\r\n    std_msgs::String msg;\r\n    //发布频率\r\n    ros::Rate rate(10);//这里传的是频率\r\n    //设置频率\r\n    int count = 0;\r\n    //编写循环，循环中发布数据\r\n    while(ros::ok()){//ok就是节点还存在\r\n        count ++;\r\n        std::stringstream ss;\r\n        ss <<\"hello --->\"<<count;\r\n        // msg.data=\"hello\";\r\n        msg.data=ss.str();\r\n        pub.publish(msg);\r\n        //添加日志\r\n        ROS_INFO(\"发布的数据是：%s\",ss.str().c_str());\r\n        rate.sleep();\r\n    }\r\n    return 0;\r\n}`\r\nvar code9=``\r\nvar code10=``\r\nvar code11=``\r\nvar code12=``\r\nvar code13=``\r\nvar code14=``\r\nvar code15=``\r\nvar code16=``\r\n    </script>\r\n    <style  scoped>\r\n    </style>","import script from \"./construce.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./construce.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  操作官方网站：<a href=\"https://wiki.ros.org/cn/ROS/Tutorials\" _target=\"blank\">点此链接</a>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>rospack</strong></template>\r\n      1、rospack find package_name<br/>\r\n      例如：rospack find roscpp,将会输出/opt/ros/noetic/share/roscpp<br/>\r\n      2、rospack list \r\n      列出所有功能包\r\n      \r\n    </el-card>\r\n\r\n\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>roscd</strong></template>\r\n      允许你直接切换目录到某个软件包或软件包集中，也可以切换到软件包或软件包集的子目录中<br/>\r\n 1、用法：roscd roscpp ，会直接切换到/opt/ros/noetic/share/roscpp的cmd中<br/>\r\n 再pwd，可以输出当前工作目录<br/>\r\n 查看可以切换到那些：echo $ROS_PACKAGE_PATH<br/>\r\n2、查看ROS日志文件的目录：roscd log<br/>\r\n    </el-card>\r\n\r\n\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>rosls</strong></template>\r\n按软件包名称直接ls<br/>\r\n用法：rosls roscpp_tutorials<br/>\r\n输出该软件包下的目录和文件<br/>\r\n    </el-card>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>apt search xxx</strong></template>\r\n搜索某个功能包\r\n例如：apt search ros-noetic-*可以搜索出所有 ros-noetic-*的包\r\napt search ros-noetic-* | grep -i gmapping，加了个筛选条件，列出所有ros-noetic-*切包含gmapping的包\r\n然后sudo apt install....就好了\r\n    </el-card>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>rosed 包名 文件名</strong></template>\r\n修改功能包文件\r\n比如：rosed turtlesim Color.msg\r\n    </el-card>\r\n\r\n\r\n    <el-divider>计算图模块</el-divider>\r\n\r\n\r\n\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>rqt_graph</strong></template>\r\nturtlesim_node节点和turtle_teleop_key节点之间是通过一个ROS话题来相互通信的。turtle_teleop_key在话题上发布键盘按下的消息，turtlesim则订阅该话题以接收消息。让我们使用rqt_graph来显示当前运行的节点和话题。<br/>\r\nrqt_graph用动态的图显示了系统中正在发生的事情。rqt_graph是rqt程序包中的一部分。<br/><br/>\r\n首先是安装：<br/>\r\nsudo apt-get install ros-noetic-rqt<br/>\r\n    sudo apt-get install ros-noetic-rqt-common-plugins<br/>\r\n    然后是运行：<br/>\r\n    rosrun rqt_graph rqt_graph<br/>\r\n    如果把鼠标放在/turtle1/command_velocity上方，相应的ROS节点（这里是蓝色和绿色）和话题（这里是红色）就会高亮显示。可以看到，turtlesim_node和turtle_teleop_key节点正通过一个名为/turtle1/command_velocity的话题来相互通信。<br/><br/>\r\n\r\n    </el-card>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>rostopic</strong></template>\r\n\r\n      rostopic命令工具能让你获取ROS话题的信息。<br/>\r\n先通过rostopic -h来查看可用的子命令<br/>\r\nrostopic echo [topic]可以显示某个话题上发布的数据，例如在新的版本中，这些数据发布在rostopic echo /turtle1/cmd_vel话题上<br/>\r\nrostopic echo /turtle1/cmd_vel就可以查看（要再按方向键才会显示）<br/><br/>\r\n现在让我们再看一下rqt_graph。先按下左上角的刷新按钮以显示新节点。正如你所看到的，rostopic echo（这里以红色显示）现在也订阅了turtle1/command_velocity话题。<br/><br/>\r\n\r\n    </el-card>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>rostopic list</strong></template>\r\n      使用rostopic list能够列出当前已被订阅和发布的所有话题。<br/>\r\n查看list子命令需要的参数：rostopic list -h<br/>\r\n使用list中的-v选项：rostopic list -v会列出所有发布和订阅的主题及其类型的详细信息<br/><br/>\r\n    </el-card>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>rostopic type</strong></template>\r\n      使用rostopic type命令用来查看所发布话题的消息类型。<br/>\r\n运行ostopic type /turtle1/cmd_vel，你会看到：geometry_msgs/Twist<br/>\r\n运行rosmsg show geometry_msgs/Twist查看详细信息<br/>\r\n知道了turtlesim节点想要的消息类型，然后就可以发布命令给turtle了<br/><br/>\r\n    </el-card>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>rostopic pub</strong></template>\r\n      rostopic pub可以把数据发布到当前某个正在广播的话题上<br/>\r\n用法：rostopic pub [topic] [msg_type] [args]<br/>\r\n示例：rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'<br/>\r\n以上命令会发送一条消息给turtlesim，告诉它以2.0大小的线速度和1.8大小的角速度移动。<br/>\r\n以下命令将消息发布到指定的话题：<br/>\r\nrostopic pub<br/>\r\n以下选项会让rostopic只发布一条消息，然后退出：<br/>\r\n -1 <br/>\r\n 以下是要发布到的话题的名称：<br/>\r\n/turtle1/cmd_vel<br/><br/>\r\n\r\n以下是发布到话题时要使用的消息的类型：<br/>\r\ngeometry_msgs/Twist<br/><br/>\r\n\r\n以下选项（两个破折号）用来告诉选项解析器，表明之后的参数都不是选项。如果参数前有破折号（-）比如负数，那么这是必需的。<br/>\r\n--\r\n\r\n如前所述，一个turtlesim/Velocity消息有两个浮点型元素：linear和angular。在本例中，'[2.0, 0.0, 0.0]'表示linear的值为x=2.0, y=0.0, z=0.0，而'[0.0, 0.0, 1.8]'是说angular的值为x=0.0, y=0.0, z=1.8。这些参数实际上使用的是YAML语法，在YAML命令行文档中有描述。<br/>\r\n'[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]' <br/><br/>\r\n\r\n你可能已经注意到turtle已经停止移动了。这是因为turtle需要一个稳定的频率为1Hz的指令流才能保持移动状态。我们可以使用rostopic pub -r命令来发布源源不断的命令：<br/>\r\nrostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, -1.8]'<br/><br/>\r\n   \r\n可以看到，turtle正沿着一个圆形轨迹持续运动。我们可以在新终端中通过rostopic echo命令来查看turtlesim所发布的数据：<br/>\r\nrostopic echo /turtle1/pose<br/><br/>\r\n\r\n我们看一下turtlesim_node发布/turtle/pose得有多快：<br/>\r\nrostopic hz /turtle1/pose<br/><br/>\r\n    </el-card>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>rqt_plot</strong></template>\r\n      rqt_plot命令可以在滚动时间图上显示发布到某个话题上的数据。这里我们将使用rqt_plot命令来绘制正被发布到/turtle1/pose话题上的数据。首先，在一个新终端中输入：<br/><br/>\r\nrosrun rqt_plot rqt_plot\r\n这会弹出一个新窗口（先把窗口放大），可以在左上角的文本框里面添加任何想要绘制的话题。在里面输入/turtle1/pose/x后，之前不能按下的加号按钮将会变亮。按一下该按钮，并对/turtle1/pose/y重复相同的过程。现在你会在图中看到turtle的x-y位置。<br/>\r\n按下减号按钮会显示一组菜单可以让你在图中隐藏指定的话题。现在隐藏掉你刚才添加的话题并添加/turtle1/pose/theta，你会看到如下所示的图：<br/><br/>\r\n\r\n    </el-card>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>rosnode</strong></template>\r\n      获取节点信息\r\n      <a href=\"http://www.autolabor.com.cn/book/ROSTutorials/di-2-zhang-ros-jia-gou-she-ji/24-chang-yong-ming-ling/241-rostopic.html\" _target=\"blank\">点此链接</a>\r\n    </el-card>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>rostopic</strong></template>\r\n      显示有关ROS 主题的调试信息，包括发布者，订阅者，发布频率和ROS消息\r\n      <a href=\"http://www.autolabor.com.cn/book/ROSTutorials/di-2-zhang-ros-jia-gou-she-ji/24-chang-yong-ming-ling/242-rostopic.html\" _target=\"blank\">点此链接</a>\r\n\r\n    </el-card>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>rosmsg</strong></template>\r\n      显示有关 ROS消息类型的信息\r\n      <a href=\"http://www.autolabor.com.cn/book/ROSTutorials/di-2-zhang-ros-jia-gou-she-ji/24-chang-yong-ming-ling/244-rosmsg.html\" _target=\"blank\">点此链接</a>\r\n\r\n    </el-card>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>rosservice</strong></template>\r\n      \r\n      <a href=\"http://www.autolabor.com.cn/book/ROSTutorials/di-2-zhang-ros-jia-gou-she-ji/24-chang-yong-ming-ling/243-rosservice.html\" _target=\"blank\">点此链接</a>\r\n\r\n    </el-card>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>rossrv</strong></template>\r\n      显示有关ROS服务类型的信息的命令行工具\r\n      <a href=\"http://www.autolabor.com.cn/book/ROSTutorials/di-2-zhang-ros-jia-gou-she-ji/24-chang-yong-ming-ling/245-rossrv.html\" _target=\"blank\">点此链接</a>\r\n\r\n    </el-card>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>rosparam</strong></template>\r\n      用于使用YAML编码文件在参数服务器上获取和设置ROS参数。\r\n      <a href=\"http://www.autolabor.com.cn/book/ROSTutorials/di-2-zhang-ros-jia-gou-she-ji/24-chang-yong-ming-ling/246-rosparam.html\" _target=\"blank\">点此链接</a>\r\n\r\n    </el-card>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>rqt_plot</strong></template>\r\n\r\n    </el-card>\r\n    </template>\r\n    <script setup>\r\n    </script>\r\n    <style  scoped>\r\n    </style>","import { render } from \"./operations.vue?vue&type=template&id=42bf209c\"\nconst script = {}\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n<a href=\"https://wiki.ros.org/ROS/CommandLineTools\" target=\"_blank\"> ROS常用操作连接</a><br/> \r\n  <a href=\"http://www.autolabor.com.cn/book/ROSTutorials/di-2-zhang-ros-jia-gou-she-ji/24-can-shu-fu-wu-qi/232-can-shu-cao-zuo-a-c-++.html\" target=\"_blank\">  -------网站在此-------</a> \r\n  <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>案例0：新建功能包</strong></template>\r\n 1、右键大src，选择create catkin packages<br/>\r\n2、输入包名和roscpp rospy std_msgs<br/>\r\n完成<br/>\r\n</el-card>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>案例1：话题通信基本操作（C++）</strong></template>\r\n      需求：编写发布订阅实现，要求发布方以10HZ（每秒10次）的频率发布文本消息，订阅方订阅消息并将消息内容打印输出。<br/><br/><br/>\r\n        发布方实现：<br/>\r\n    首先建文件夹  mkdir -p ~/catkin_ws/src<br/>\r\n进入文件夹cd ~/catkin_ws/<br/>\r\n再catkin_make<br/>\r\nsource devel/setup.bash<br/>\r\ncode .<br/>\r\n点击ctrl+shift+b，点击catkin_make:build右侧的齿轮<br/>\r\n改为<el-button type=\"primary\" @click=\"if(v1==false)v1=true;else v1=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"c++\" :autodetect=\"false\" v-show=\"v1\" :code=\"code1\"></highlightjs>\r\n保存后关闭,再次点击ctrl+shift+b<br/>\r\n右键src选择create catkin package，输入plugin_pub_sub后回车，再输入roscpp rospy std_msgs再回车<br/>\r\n再次ctrl+shift+b<br/>\r\n打开c_cpp_properties.json,把这句话改成 \"cppStandard\": \"c++17\"<br/>\r\n在src下创建demo01_pub.cpp,写入内容：<el-button type=\"primary\" @click=\"if(v2==false)v2=true;else v2=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"c++\" :autodetect=\"false\" v-show=\"v2\" :code=\"code2\"></highlightjs>\r\n再修改和src平级的CMakeLists.txt，<br/>\r\nadd_executable(${PROJECT_NAME}_node src/demo01_pub.cpp)和<br/>\r\ntarget_link_libraries(${PROJECT_NAME}_node<br/>\r\n  ${catkin_LIBRARIES}<br/>\r\n)<br/>\r\n改为add_executable(demo01_pub src/demo01_pub.cpp)和<br/>\r\ntarget_link_libraries(demo01_pub<br/>\r\n  ${catkin_LIBRARIES}<br/>\r\n)<br/>\r\n,再进入demo01_pub.cpp，ctrl+shift+b一下。<br/>\r\n新建一个终端，执行roscore，<br/>\r\n再新建一个终端，输入source ./devel/setup.bash，\r\n再rosrun plugin_pub_sub demo01_pub<br/><br/><br/><br/>\r\n\r\n订阅方实现：<br/>\r\nsrc下创建demo2_sub.cpp<br/>\r\n写入内容：<el-button type=\"primary\" @click=\"if(v3==false)v3=true;else v3=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"c++\" :autodetect=\"false\" v-show=\"v3\" :code=\"code3\"></highlightjs>\r\n\r\n再修改和src平级的CMakeLists.txt，<br/>\r\n基本复制即可，如下：<el-button type=\"primary\" @click=\"if(v4==false)v4=true;else v4=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"c++\" :autodetect=\"false\" v-show=\"v4\" :code=\"code4\"></highlightjs>\r\n然后ctrl+shift+b、catkin_make、source等再rosrun plugin_pub_sub demo02_sub<br/>\r\n    </el-card>\r\n\r\n\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>案例1：话题通信基本操作（Python）</strong></template>\r\n      需求：编写发布订阅实现，要求发布方以10HZ（每秒10次）的频率发布文本消息，订阅方订阅消息并将消息内容打印输出。<br/><br/><br/>\r\n        发布方实现：<br/>\r\n    还是刚刚的工作空间<br/>\r\n新建一个与小src统计的文件夹scripts<br/>\r\n新建文件demo01_pub_p.py，内容如下：<el-button type=\"primary\" @click=\"if(v5==false)v5=true;else v5=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"python\" :autodetect=\"false\" v-show=\"v5\" :code=\"code5\"></highlightjs>\r\n然后终端打开scripts，为他添加可执行权限:chmod +x *.py<br/>\r\n修改小CMakeLists，<br/>\r\ncatkin_install_python(PROGRAMS<br/>\r\n  scripts/demo01_pub_p.py<br/>\r\n  DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}<br/>\r\n)<br/>\r\nctrl+shift+b、catkin_make、source，再rosrun ，再rostopic echo che<br/><br/><br/><br/>\r\n订阅方实现：<br/>\r\nsrc下创建demo02_sub_p.cpp<br/>\r\n写入内容：<el-button type=\"primary\" @click=\"if(v6==false)v6=true;else v6=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"python\" :autodetect=\"false\" v-show=\"v6\" :code=\"code6\"></highlightjs>\r\n\r\n在CMakeLists.txt中特定行复制并粘贴<br/>\r\n\r\n然后ctrl+shift+b、catkin_make、source等再rosrun plugin_pub_sub demo02_sub_p、rosrun plugin_pub_sub demo01_pub_p<br/>\r\n\r\n    </el-card>\r\n\r\n\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>案例2：话题通信自定义msg调用A(C++)</strong></template>\r\n 1、在小src同级目录下创建msg文件夹，再建一个Person.msg,里面内容：<el-button type=\"primary\" @click=\"if(v7==false)v7=true;else v7=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"python\" :autodetect=\"false\" v-show=\"v7\" :code=\"code7\"></highlightjs>\r\n2、修改package.xml，添加依赖：<br/>\r\n<a href=\"http://www.autolabor.com.cn/book/ROSTutorials/di-2-zhang-ros-jia-gou-she-ji/22hua-ti-tong-xin/214-hua-ti-tong-xin-zhi-zi-ding-yi-xiao-xi.html\">此网站</a><br/>\r\n然后实现<a href=\"http://www.autolabor.com.cn/book/ROSTutorials/di-2-zhang-ros-jia-gou-she-ji/22hua-ti-tong-xin/215-hua-ti-tong-xin-zhi-c-diao-yong-zi-ding-yi-xiao-xi.html\">这个网站的第一部和第三部</a>：<br/>\r\n此网站第一部中head的目录这样得出：<br/>\r\n进入~/demo3_ws/devel/include/plugin_pub_sub的终端，再pwd，输出的就是<br/>\r\n发布方文件的代码为：<br/>\r\ndemo03_pub_person.cpp：<el-button type=\"primary\" @click=\"if(v8==false)v8=true;else v8=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"python\" :autodetect=\"false\" v-show=\"v8\" :code=\"code8\"></highlightjs>\r\n发布方能运行时的c_cpp_properties.json：<el-button type=\"primary\" @click=\"if(v9==false)v9=true;else v9=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"python\" :autodetect=\"false\" v-show=\"v9\" :code=\"code10\"></highlightjs>\r\n能运行时的demo04_sub_person.cpp：<el-button type=\"primary\" @click=\"if(v10==false)v10=true;else v10=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"python\" :autodetect=\"false\" v-show=\"v10\" :code=\"code9\"></highlightjs>\r\n能运行时的CMakeLists.txt<el-button type=\"primary\" @click=\"if(v11==false)v11=true;else v11=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"python\" :autodetect=\"false\" v-show=\"v11\" :code=\"code11\"></highlightjs>\r\n\r\n    </el-card>\r\n\r\n\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>案例2：话题通信自定义msg调用B(Python)</strong></template>\r\n 1、配置settings.json<br/>\r\n进入devel->lib->python3->dist-packages，pwd<el-button type=\"primary\" @click=\"if(v12==false)v12=true;else v12=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"python\" :autodetect=\"false\" v-show=\"v12\" :code=\"code12\"></highlightjs>\r\n2、进入scripts，修改权限：chmod +x *.py<br/>\r\n3、修改CMakeLists的catkin_install_python:<el-button type=\"primary\" @click=\"if(v13==false)v13=true;else v13=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"python\" :autodetect=\"false\" v-show=\"v13\" :code=\"code13\"></highlightjs>\r\n4、创建文件demo03_pub_person_p.py<el-button type=\"primary\" @click=\"if(v14==false)v14=true;else v14=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"python\" :autodetect=\"false\" v-show=\"v14\" :code=\"code14\"></highlightjs>\r\nmake、source后再rosrun plugin_pub_sub demo03_pub_person_p.py<br/>\r\n5、创建文件demo03_sub_person_p.py<el-button type=\"primary\" @click=\"if(v15==false)v15=true;else v15=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"python\" :autodetect=\"false\" v-show=\"v15\" :code=\"code15\"></highlightjs>\r\n两边都启动，就有了<br/>\r\n    </el-card>\r\n\r\n\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>案例3：服务通信自定义srv调用A(C++)</strong></template>\r\n      需求：实现两个数字的求和，客户端节点，运行会向服务器发送两个数字，服务端节点接受两个数字求和并将结果响应回客户端<br/>\r\n      先server服务端注册，再client客户端注册，再ROS Master管理者实现信息匹配，再Client发送请求，再Server发送响应。客户端和服务端都可以存在多个<br/>\r\n      srv=请求+响应<br/>\r\n1、实现案例0<br/>\r\n2、创建与小src同级的目录srv，srv下建AddInts.srv，内容：<el-button type=\"primary\" @click=\"if(v16==false)v16=true;else v16=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"python\" :autodetect=\"false\" v-show=\"v16\" :code=\"code16\"></highlightjs>\r\n3、修改package.xml：<el-button type=\"primary\" @click=\"if(v17==false)v17=true;else v17=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"python\" :autodetect=\"false\" v-show=\"v17\" :code=\"code17\"></highlightjs>\r\n4、修改CMakeLists的find_package和add_service_files和generate_messages（解除注释即可）和catkin_package<el-button type=\"primary\" @click=\"if(v18==false)v18=true;else v18=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"python\" :autodetect=\"false\" v-show=\"v18\" :code=\"code18\"></highlightjs>\r\n5、make、编译、source<br/>\r\n6、修改c_cpp_properties.json：（前面的话题通信已经改过）<br/>\r\n进入devel->include,pwd,复制，再加入includePath<el-button type=\"primary\" @click=\"if(v19==false)v19=true;else v19=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"python\" :autodetect=\"false\" v-show=\"v19\" :code=\"code10\"></highlightjs>\r\n7、src下新建demo01_server.cpp<el-button type=\"primary\" @click=\"if(v20==false)v20=true;else v20=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"c++\" :autodetect=\"false\" v-show=\"v20\" :code=\"code19\"></highlightjs>\r\n\r\n8、修改CMakeLists的add_executable和target_link_libraries和add_dependencies:<el-button type=\"primary\" @click=\"if(v21==false)v21=true;else v21=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"c++\" :autodetect=\"false\" v-show=\"v21\" :code=\"code20\"></highlightjs>\r\n9、一套操作后启动rosrun plumbing_server_client demo01_server<br/>\r\n10、另一个终端输入rosservice call addInts 1 5，回车，输出则没问题<br/>\r\n\r\n1、小src新建demo02_client.cpp,内容：<el-button type=\"primary\" @click=\"if(v22==false)v22=true;else v22=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"c++\" :autodetect=\"false\" v-show=\"v22\" :code=\"code21\"></highlightjs>\r\n\r\n2、修改配置文件<el-button type=\"primary\" @click=\"if(v23==false)v23=true;else v23=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"c++\" :autodetect=\"false\" v-show=\"v23\" :code=\"code22\"></highlightjs>\r\n先启动server，再启动client<br/>\r\n3、改进版的demo02_client.cpp，可以后面自带参数<el-button type=\"primary\" @click=\"if(v24==false)v24=true;else v24=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"c++\" :autodetect=\"false\" v-show=\"v24\" :code=\"code23\"></highlightjs>\r\n4、先启动client就会报错，所以改进版的client让他在server没启动的时候等待，client加上：client.waitForExistence();<br/>\r\n\r\n    </el-card>\r\n\r\n\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>案例3：服务通信自定义srv调用B(Python)</strong></template>\r\n        1、配置settings.json：同案例2B步骤1<br/>\r\n        2、服务端实现：<br/>\r\n        创建demo01_server_p.py<el-button type=\"primary\" @click=\"if(v25==false)v25=true;else v25=false;\" plain>显示/隐藏</el-button><br/>\r\n        <highlightjs  language=\"c++\" :autodetect=\"false\" v-show=\"v25\" :code=\"code24\"></highlightjs>\r\n        修改cmakelist和权限<br/>\r\n        rosrun plumbing_server_client demo01_server_p.py，另一个窗口rosservice call addInts 10 30，就有输出了<br/>\r\n        3、创建客户端demo02_client_p.py：<el-button type=\"primary\" @click=\"if(v26==false)v26=true;else v26=false;\" plain>显示/隐藏</el-button><br/>\r\n        <highlightjs  language=\"c++\" :autodetect=\"false\" v-show=\"v26\" :code=\"code25\"></highlightjs>\r\n        再次修改cmakelist和权限，先运行server在运行client<br/>\r\n        4、优化客户端：自定义参数<el-button type=\"primary\" @click=\"if(v27==false)v27=true;else v27=false;\" plain>显示/隐藏</el-button><br/>\r\n        <highlightjs  language=\"c++\" :autodetect=\"false\" v-show=\"v27\" :code=\"code26\"></highlightjs>\r\n        5、优化客户端：客户端可以等待服务端启动：    client.wait_for_service()\r\n    </el-card>\r\n\r\n\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>案例4：参数操作A(C++)</strong></template>\r\n      需求：实现参数服务器数据的增删改查<br/>\r\n      增：<br/>\r\n      1、新建功能包plumbing_param_server<br/>\r\n      2、小src下新建demo01_param_set.cpp:<el-button type=\"primary\" @click=\"if(v28==false)v28=true;else v28=false;\" plain>显示/隐藏</el-button><br/>\r\n      <highlightjs  language=\"c++\" :autodetect=\"false\" v-show=\"v28\" :code=\"code27\"></highlightjs>\r\n      3、修改cmakelist，一套操作然后rosrun plumbing_param_server demo01_param_set，再rosparam list就可以看到刚刚存入的参数了。再rosparam get /xxx就可以得到数据了<br/>\r\n      查：<br/>\r\n      1、新建demo02_param_get.cpp,修改cmakelists<br/>\r\n    2、代码 ：<el-button type=\"primary\" @click=\"if(v29==false)v29=true;else v29=false;\" plain>显示/隐藏</el-button><br/>\r\n    <highlightjs  language=\"c++\" :autodetect=\"false\" v-show=\"v29\" :code=\"code28\"></highlightjs>\r\n      删：<el-button type=\"primary\" @click=\"if(v30==false)v30=true;else v30=false;\" plain>显示/隐藏</el-button><br/>\r\n      <highlightjs  language=\"c++\" :autodetect=\"false\" v-show=\"v30\" :code=\"code29\"></highlightjs>\r\n    </el-card>\r\n\r\n\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>案例4：参数操作B(python)</strong></template>\r\n 增：<el-button type=\"primary\" @click=\"if(v31==false)v31=true;else v31=false;\" plain>显示/隐藏</el-button><br/>\r\n <highlightjs  language=\"c++\" :autodetect=\"false\" v-show=\"v31\" :code=\"code30\"></highlightjs>\r\n查：<el-button type=\"primary\" @click=\"if(v32==false)v32=true;else v32=false;\" plain>显示/隐藏</el-button><br/>\r\n<highlightjs  language=\"c++\" :autodetect=\"false\" v-show=\"v32\" :code=\"code31\"></highlightjs>\r\n\r\n    </el-card>\r\n\r\n\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>自定义头文件调用</strong></template>\r\n\r\n    </el-card>\r\n\r\n\r\n    </template>\r\n    <script setup>\r\n    import { ref } from 'vue';\r\n    var code1=`{\r\n\t\"version\": \"2.0.0\",\r\n\t\"tasks\": [\r\n\t\t{\r\n\t\t\t\"type\": \"shell\",\r\n\t\t\t\"args\": [\r\n\t\t\t\t\"--directory\",\r\n\t\t\t\t\"/home/ljj/demo2_ws\",\r\n\t\t\t\t\"-DCMAKE_BUILD_TYPE=RelWithDebInfo\"\r\n\t\t\t],\r\n\t\t\t\"problemMatcher\": [\r\n\t\t\t\t\"$msCompile\"\r\n\t\t\t],\r\n\t\t\t\"presentation\":{\"reveal\":\"always\"},\r\n\t\t\t\"command\":\"catkin_make\",\r\n\t\t\t\"group\": {\"kind\":\"build\",\"isDefault\":true},\r\n\t\t\t\"label\": \"catkin_make: debug\"\r\n\t\t}\r\n\t]\r\n}`\r\n    var code2=`#include \"ros/ros.h\"\r\n#include \"std_msgs/String.h\"\r\n#include<sstream>\r\n/*\r\n    发布方实现：\r\n        1、包含头文件\r\n        2、初始化ROS节点\r\n        3、创建节点句柄\r\n        4、创建发布者对象\r\n        5、编写发布逻辑并发布数据\r\n*/\r\nint main(int argc,char *argv[]){\r\n    setlocale(LC_ALL,\"\");\r\n    //3、初始化ros节点\r\n    ros::init(argc,argv,\"erGouZi\");\r\n    //3、创建节点句柄\r\n    ros::NodeHandle nh;\r\n    //4、创建发布者对象\r\n    ros::Publisher pub = nh.advertise<std_msgs::String>(\"fangzi\",10);//可以通过rostopic echo fangzi 来查看发布的话题。泛型：发布的消息类型，参数1：要发布的话题，参数2：队列中最大保存的消息数，超出时时间早的先销毁\r\n    //5、编写发布逻辑并发布数据\r\n    //要求以10HZ的频率发布数据，并且文本后添加编号\r\n    //先创建被发布的消息\r\n    std_msgs::String msg;\r\n    //发布频率\r\n    ros::Rate rate(10);//这里传的是频率\r\n    //设置频率\r\n    int count = 0;\r\n    ros:Duration(3).sleep();//为了防止第一条数据接收不到\r\n    //编写循环，循环中发布数据\r\n    while(ros::ok()){//ok就是节点还存在\r\n        count ++;\r\n        std::stringstream ss;\r\n        ss <<\"hello --->\"<<count;\r\n        // msg.data=\"hello\";\r\n        msg.data=ss.str();\r\n        pub.publish(msg);\r\n        //添加日志\r\n        ROS_INFO(\"发布的数据是：%s\",ss.str().c_str());\r\n        rate.sleep();\r\n    }\r\n    return 0;\r\n}`\r\n    var code3=`#include \"ros/ros.h\"\r\n#include \"std_msgs/String.h\"\r\n#include<sstream>\r\n/*\r\n    发布方实现：\r\n        1、包含头文件\r\n        2、初始化ROS节点\r\n        3、创建节点句柄\r\n        4、创建订阅者对象\r\n        5、处理订阅到的数据\r\n        6、spin()函数\r\n*/\r\nvoid doMsg(const std_msgs::String::ConstPtr &msg){\r\n    //通过msg获取并操作订阅到的数据\r\n    ROS_INFO(\"翠花订阅的数据：%s\",msg->data.c_str());\r\n}\r\nint main(int argc,char *argv[]){\r\n    setlocale(LC_ALL,\"\");\r\n    //3、初始化ros节点\r\n    ros::init(argc,argv,\"cuihua\");\r\n    //3、创建节点句柄\r\n    ros::NodeHandle nh;\r\n    //4、创建订阅者对象\r\n    ros::Subscriber sub = nh.subscribe<std_msgs::String>(\"fangzi\",10,doMsg);\r\n    //5、处理订阅到的数据\r\n    ros::spin();//循环读取接受的数据，并调用回调函数处理\r\n    return 0;\r\n}`\r\n    var code4=`  add_executable(demo01_pub src/demo1_pub.cpp)\r\n    add_executable(demo02_pub src/demo2_pub.cpp)\r\n    \r\n\r\n\r\n    \r\n    target_link_libraries(demo01_pub\r\n     ...\r\n    )\r\n    \r\n    target_link_libraries(demo02_sub\r\n     ...\r\n    )`\r\n    var code5=`#！ /usr/bin/env python\r\nimport rospy\r\nfrom std_msgs.msg import String\r\n\r\n\"\"\"\r\n    使用python实现消息发布：\r\n    1、导包\r\n    2、初始化ROS节点\r\n    3、创建发布者对象\r\n    4、编写发布逻辑并发布数据\r\n\"\"\"\r\n\r\nif __name__==\"__main__\":\r\n    #2、初始化ROS节点：\r\n    rospy.init_node(\"sanDai\")\r\n    #3、创建发布者对象\r\n    pub=rospy.Publisher(\"che\",String,queue_size=10);\r\n    #4、编写发布逻辑并发布数据\r\n    #创建数据\r\n    msg=String()\r\n    #设置发布频率\r\n    rate=rospy.Rate(1);\r\n    #设置计数器\r\n    count=0;\r\n    #使用循环发布数据\r\n    rospy.sleep(3)\r\n    while not rospy.is_shutdown():\r\n        count+=1\r\n        msg.data=\"hello\"+str(count)\r\n        #发布数据\r\n        pub.publish(msg);\r\n        rospy.loginfo(\"发布的数据：%s\",msg.data);\r\n        rate.sleep()`\r\n    var code6=`#！ /usr/bin/env python\r\nimport rospy\r\nfrom std_msgs.msg import String\r\n\r\n\"\"\"\r\n    使用python实现消息发布：\r\n    1、导包\r\n    2、初始化ROS节点\r\n    3、创建订阅者对象\r\n    4、回调函数处理数据\r\n    5、spin()\r\n\"\"\"\r\ndef doMsg(msg):\r\n    rospy.loginfo(\"我订阅的数据：%s\",msg.data);\r\n\r\nif __name__==\"__main__\":\r\n    #2、初始化ROS节点：\r\n    rospy.init_node(\"huaHua\")\r\n    #3、创建订阅者对象\r\n    sub=rospy.Subscriber(\"che\",String,doMsg,queue_size=10);\r\n    #4、回调函数处理数据\r\n    \r\n    #5、spin()\r\n    rospy.spin()`\r\n    var code7=`string name\r\nint32 age\r\nfloat32 height`\r\n    var code8=` #include \"ros/ros.h\"\r\n#include \"plugin_pub_sub/Person.h\"\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    setlocale(LC_ALL,\"\");\r\n\r\n    ROS_INFO(\"这是发布消息方\");\r\n\r\n    //1.初始化 ROS 节点\r\n    ros::init(argc,argv,\"talker_person\");\r\n\r\n    //2.创建 ROS 句柄\r\n    ros::NodeHandle nh;\r\n\r\n    //3.创建发布者对象\r\n    ros::Publisher pub = nh.advertise<plugin_pub_sub::Person>(\"liaotian\",10);\r\n\r\n    //4.组织被发布的消息，编写发布逻辑并发布消息\r\n    plugin_pub_sub::Person p;\r\n    p.name = \"张三\";\r\n    p.age = 1;\r\n    p.height = 1.73;\r\n\r\n    ros::Rate r(1);\r\n    while (ros::ok())\r\n    {\r\n        pub.publish(p);\r\n        p.age += 1;\r\n        ROS_INFO(\"我叫:%s,今年%d岁,高%.2f米\", p.name.c_str(), p.age, p.height);\r\n\r\n        r.sleep();\r\n        ros::spinOnce();\r\n    }\r\n    return 0;\r\n}`\r\n    var code9=`#include \"ros/ros.h\"\r\n#include \"std_msgs/String.h\"\r\n#include<sstream>\r\n#include\"plugin_pub_sub/Person.h\"\r\n/*\r\n    发布方实现：\r\n        1、包含头文件\r\n        2、初始化ROS节点\r\n        3、创建节点句柄\r\n        4、创建订阅者对象\r\n        5、处理订阅到的数据\r\n        6、spin()函数\r\n*/\r\nvoid doPerson(const plugin_pub_sub::Person::ConstPtr &person){\r\n    ROS_INFO(\"订阅的人的信息：%s,%d,%.2f\",person->name.c_str(),person->age,person->height);\r\n}\r\nint main(int argc,char *argv[]){\r\n    setlocale(LC_ALL,\"\");\r\n    ROS_INFO(\"订阅方实现\");\r\n    //3、初始化ros节点\r\n    ros::init(argc,argv,\"jiaZhang\");\r\n    //3、创建节点句柄\r\n    ros::NodeHandle nh;\r\n    //4、创建订阅者对象\r\n    ros::Subscriber sub = nh.subscribe(\"liaotian\",10,doPerson);\r\n    //5、处理订阅到的数据\r\n    ros::spin();\r\n    return 0;\r\n}`\r\n    var code10=`DDDDD代替dollar符号\r\n{\r\n  \"configurations\": [\r\n    {\r\n      \"browse\": {\r\n        \"databaseFilename\": \"DDDDD{default}\",\r\n        \"limitSymbolsToIncludedHeaders\": false\r\n      },\r\n      \"includePath\": [\r\n        \"/opt/ros/noetic/include/**\",\r\n        \"/usr/include/**\",\r\n        \"/home/ljj/demo3_ws/devel/include/**\"\r\n      ],\r\n      \"name\": \"ROS\",\r\n      \"intelliSenseMode\": \"gcc-x64\",\r\n      \"compilerPath\": \"/usr/bin/gcc\",\r\n      \"cStandard\": \"gnu11\",\r\n      \"cppStandard\": \"c++17\"\r\n    }\r\n  ],\r\n  \"version\": 4\r\n}\r\n`\r\n    var code11=`cmake_minimum_required(VERSION 3.0.2)\r\nproject(plugin_pub_sub)\r\n\r\n## Compile as C++11, supported in ROS Kinetic and newer\r\n# add_compile_options(-std=c++11)\r\n\r\n## Find catkin macros and libraries\r\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\r\n## is used, also find other catkin packages\r\nfind_package(catkin REQUIRED COMPONENTS\r\n  roscpp\r\n  rospy\r\n  std_msgs\r\n  message_generation\r\n)\r\n\r\n\r\n## System dependencies are found with CMake's conventions\r\n# find_package(Boost REQUIRED COMPONENTS system)\r\n\r\n\r\n## Uncomment this if the package has a setup.py. This macro ensures\r\n## modules and global scripts declared therein get installed\r\n## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html\r\n# catkin_python_setup()\r\n\r\n################################################\r\n## Declare ROS messages, services and actions ##\r\n################################################\r\n\r\n## To declare and build messages, services or actions from within this\r\n## package, follow these steps:\r\n## * Let MSG_DEP_SET be the set of packages whose message types you use in\r\n##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).\r\n## * In the file package.xml:\r\n##   * add a build_depend tag for \"message_generation\"\r\n##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET\r\n##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in\r\n##     but can be declared for certainty nonetheless:\r\n##     * add a exec_depend tag for \"message_runtime\"\r\n## * In this file (CMakeLists.txt):\r\n##   * add \"message_generation\" and every package in MSG_DEP_SET to\r\n##     find_package(catkin REQUIRED COMPONENTS ...)\r\n##   * add \"message_runtime\" and every package in MSG_DEP_SET to\r\n##     catkin_package(CATKIN_DEPENDS ...)\r\n##   * uncomment the add_*_files sections below as needed\r\n##     and list every .msg/.srv/.action file to be processed\r\n##   * uncomment the generate_messages entry below\r\n##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)\r\n\r\n## Generate messages in the 'msg' folder\r\nadd_message_files(\r\n  FILES\r\n  Person.msg\r\n)\r\n\r\n## Generate services in the 'srv' folder\r\n# add_service_files(\r\n#   FILES\r\n#   Service1.srv\r\n#   Service2.srv\r\n# )\r\n\r\n## Generate actions in the 'action' folder\r\n# add_action_files(\r\n#   FILES\r\n#   Action1.action\r\n#   Action2.action\r\n# )\r\n\r\n## Generate added messages and services with any dependencies listed here\r\ngenerate_messages(\r\n  DEPENDENCIES\r\n  std_msgs\r\n)\r\n\r\n################################################\r\n## Declare ROS dynamic reconfigure parameters ##\r\n################################################\r\n\r\n## To declare and build dynamic reconfigure parameters within this\r\n## package, follow these steps:\r\n## * In the file package.xml:\r\n##   * add a build_depend and a exec_depend tag for \"dynamic_reconfigure\"\r\n## * In this file (CMakeLists.txt):\r\n##   * add \"dynamic_reconfigure\" to\r\n##     find_package(catkin REQUIRED COMPONENTS ...)\r\n##   * uncomment the \"generate_dynamic_reconfigure_options\" section below\r\n##     and list every .cfg file to be processed\r\n\r\n## Generate dynamic reconfigure parameters in the 'cfg' folder\r\n# generate_dynamic_reconfigure_options(\r\n#   cfg/DynReconf1.cfg\r\n#   cfg/DynReconf2.cfg\r\n# )\r\n\r\n###################################\r\n## catkin specific configuration ##\r\n###################################\r\n## The catkin_package macro generates cmake config files for your package\r\n## Declare things to be passed to dependent projects\r\n## INCLUDE_DIRS: uncomment this if your package contains header files\r\n## LIBRARIES: libraries you create in this project that dependent projects also need\r\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\r\n## DEPENDS: system dependencies of this project that dependent projects also need\r\ncatkin_package(\r\n#  INCLUDE_DIRS include\r\n#  LIBRARIES plugin_pub_sub\r\n CATKIN_DEPENDS roscpp rospy std_msgs message_runtime\r\n#  DEPENDS system_lib\r\n)\r\n\r\n###########\r\n## Build ##\r\n###########\r\n\r\n## Specify additional locations of header files\r\n## Your package locations should be listed before other locations\r\ninclude_directories(\r\n# include\r\n  DDDDD{catkin_INCLUDE_DIRS}\r\n)\r\n\r\n## Declare a C++ library\r\n# add_library(DDDDD{PROJECT_NAME}\r\n#   src/DDDDD{PROJECT_NAME}/plugin_pub_sub.cpp\r\n# )\r\n\r\n## Add cmake target dependencies of the library\r\n## as an example, code may need to be generated before libraries\r\n## either from message generation or dynamic reconfigure\r\n# add_dependencies(DDDDD{PROJECT_NAME} DDDDD{DDDDD{PROJECT_NAME}_EXPORTED_TARGETS} DDDDD{catkin_EXPORTED_TARGETS})\r\n\r\n## Declare a C++ executable\r\n## With catkin_make all packages are built within a single CMake context\r\n## The recommended prefix ensures that target names across packages don't collide\r\n# add_executable(DDDDD{PROJECT_NAME}_node src/plugin_pub_sub_node.cpp)\r\nadd_executable(demo01_pub src/demo1_pub.cpp)\r\nadd_executable(demo02_sub src/demo2_sub.cpp)\r\nadd_executable(demo03_pub_person src/demo03_pub_person.cpp)\r\nadd_executable(demo04_sub_person src/demo04_sub_person.cpp)\r\n\r\n## Rename C++ executable without prefix\r\n## The above recommended prefix causes long target names, the following renames the\r\n## target back to the shorter version for ease of user use\r\n## e.g. \"rosrun someones_pkg node\" instead of \"rosrun someones_pkg someones_pkg_node\"\r\n# set_target_properties(DDDDD{PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX \"\")\r\n\r\n## Add cmake target dependencies of the executable\r\n## same as for the library above\r\nadd_dependencies(demo03_pub_person DDDDD{PROJECT_NAME}_generate_messages_cpp)\r\nadd_dependencies(demo04_sub_person DDDDD{PROJECT_NAME}_generate_messages_cpp)\r\n\r\n## Specify libraries to link a library or executable target against\r\ntarget_link_libraries(demo01_pub\r\n  DDDDD{catkin_LIBRARIES}\r\n)\r\n\r\ntarget_link_libraries(demo02_sub\r\n  DDDDD{catkin_LIBRARIES}\r\n)\r\ntarget_link_libraries(demo03_pub_person\r\n  DDDDD{catkin_LIBRARIES}\r\n)\r\n\r\ntarget_link_libraries(demo04_sub_person\r\n  DDDDD{catkin_LIBRARIES}\r\n)\r\n#############\r\n## Install ##\r\n#############\r\n\r\n# all install targets should use catkin DESTINATION variables\r\n# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html\r\n\r\n## Mark executable scripts (Python etc.) for installation\r\n## in contrast to setup.py, you can choose the destination\r\ncatkin_install_python(PROGRAMS\r\n  scripts/demo01_pub_p.py\r\n  DESTINATION DDDDD{CATKIN_PACKAGE_BIN_DESTINATION}\r\n)\r\ncatkin_install_python(PROGRAMS\r\n  scripts/demo02_sub_p.py\r\n  DESTINATION DDDDD{CATKIN_PACKAGE_BIN_DESTINATION}\r\n)\r\n## Mark executables for installation\r\n## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html\r\n# install(TARGETS DDDDD{PROJECT_NAME}_node\r\n#   RUNTIME DESTINATION DDDDD{CATKIN_PACKAGE_BIN_DESTINATION}\r\n# )\r\n\r\n## Mark libraries for installation\r\n## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html\r\n# install(TARGETS DDDDD{PROJECT_NAME}\r\n#   ARCHIVE DESTINATION DDDDD{CATKIN_PACKAGE_LIB_DESTINATION}\r\n#   LIBRARY DESTINATION DDDDD{CATKIN_PACKAGE_LIB_DESTINATION}\r\n#   RUNTIME DESTINATION DDDDD{CATKIN_GLOBAL_BIN_DESTINATION}\r\n# )\r\n\r\n## Mark cpp header files for installation\r\n# install(DIRECTORY include/DDDDD{PROJECT_NAME}/\r\n#   DESTINATION DDDDD{CATKIN_PACKAGE_INCLUDE_DESTINATION}\r\n#   FILES_MATCHING PATTERN \"*.h\"\r\n#   PATTERN \".svn\" EXCLUDE\r\n# )\r\n\r\n## Mark other files for installation (e.g. launch and bag files, etc.)\r\n# install(FILES\r\n#   # myfile1\r\n#   # myfile2\r\n#   DESTINATION DDDDD{CATKIN_PACKAGE_SHARE_DESTINATION}\r\n# )\r\n\r\n#############\r\n## Testing ##\r\n#############\r\n\r\n## Add gtest based cpp test target and link libraries\r\n# catkin_add_gtest(DDDDD{PROJECT_NAME}-test test/test_plugin_pub_sub.cpp)\r\n# if(TARGET DDDDD{PROJECT_NAME}-test)\r\n#   target_link_libraries(DDDDD{PROJECT_NAME}-test DDDDD{PROJECT_NAME})\r\n# endif()\r\n\r\n## Add folders to be run by python nosetests\r\n# catkin_add_nosetests(test)\r\n`\r\n    var code12=`{\r\n    \"python.autoComplete.extraPaths\": [\r\n        \"/opt/ros/noetic/lib/python3/dist-packages\",\r\n        \"/home/ljj/demo3_ws/devel/lib/python3/dist-packages\"\r\n    ],\r\n    \"python.analysis.extraPaths\": [\r\n        \"/opt/ros/noetic/lib/python3/dist-packages\"\r\n    ]\r\n}`\r\n    var code13=`catkin_install_python(PROGRAMS\r\n  scripts/demo01_pub_p.py\r\n  scripts/demo02_sub_p.py\r\n  scripts/demo03_pub_person_p.py\r\n  scripts/demo03_sub_person_p.py\r\n  DESTINATION DDDDD{CATKIN_PACKAGE_BIN_DESTINATION}\r\n)`\r\n    var code14=`#！ /usr/bin/env python\r\nimport rospy\r\nfrom plugin_pub_sub.msg import Person\r\n\r\n\"\"\"\r\n    使用python实现消息发布：\r\n    1、导包\r\n    2、初始化ROS节点\r\n    3、创建发布者对象\r\n    4、组织发布逻辑并发布数据\r\n\"\"\"\r\n\r\nif __name__==\"__main__\":\r\n    #2、初始化ROS节点：\r\n    rospy.init_node(\"daMa\")\r\n    #3、创建发布者对象\r\n    pub=rospy.Publisher(\"jiaoshetou\",Person,queue_size=10);\r\n    #4、组织发布逻辑并发布数据\r\n    #创建Person数据\r\n    p=Person()\r\n    p.name=\"奥特曼\"\r\n    p.height=1.85\r\n    #设置发布频率(一秒一次)\r\n    rate=rospy.Rate(1);\r\n    # #使用循环发布数据\r\n    # rospy.sleep(3)\r\n    while not rospy.is_shutdown():\r\n        #发布数据\r\n        pub.publish(p);\r\n        rospy.loginfo(\"发布的消息：%s,%d,%.2f\",p.name,p.age,p.height);\r\n        rate.sleep()`\r\n    var code15=`#！ /usr/bin/env python\r\nimport rospy\r\nfrom plugin_pub_sub.msg import Person\r\n\r\n\"\"\"\r\n    使用python实现消息发布：\r\n    1、导包\r\n    2、初始化ROS节点\r\n    3、创建订阅者对象\r\n    4、处理订阅的数据\r\n    5、spin()\r\n\"\"\"\r\ndef doPerson(p):\r\n    rospy.loginfo(\"小伙子的数据：：%s,%d,%.2f\",p.name,p.age,p.height);\r\n\r\nif __name__==\"__main__\":\r\n    #2、初始化ROS节点：\r\n    rospy.init_node(\"daYe\")\r\n    #3、创建订阅者对象\r\n    sub=rospy.Subscriber(\"jiaoshetou\",Person,doPerson);\r\n    #4、回调函数处理数据\r\n    \r\n    #5、spin()\r\n    rospy.spin()`\r\n    var code16=`#客户端请求时发送的两个数字\r\nint32 num1\r\nint32 num2\r\n---\r\n#服务器响应发送的数据\r\nint32 sum`\r\n    var code17=`  <buildtool_depend>catkin</buildtool_depend>\r\n  <build_depend>roscpp</build_depend>\r\n  <build_depend>rospy</build_depend>\r\n  <build_depend>std_msgs</build_depend>\r\n  <build_export_depend>roscpp</build_export_depend>\r\n  <build_export_depend>rospy</build_export_depend>\r\n  <build_export_depend>std_msgs</build_export_depend>\r\n  <exec_depend>roscpp</exec_depend>\r\n  <exec_depend>rospy</exec_depend>\r\n  <exec_depend>std_msgs</exec_depend>`\r\n    var code18=`find_package(catkin REQUIRED COMPONENTS\r\n  roscpp\r\n  rospy\r\n  std_msgs\r\n  message_generation\r\n)\r\n\r\nadd_service_files(\r\n  FILES\r\n  AddInts.srv\r\n)\r\n\r\ncatkin_package(\r\n#  INCLUDE_DIRS include\r\n#  LIBRARIES plumbing_server_client\r\n CATKIN_DEPENDS roscpp rospy std_msgs message_runtime\r\n#  DEPENDS system_lib\r\n)\r\n\r\n`\r\n    var code19=`#include \"ros/ros.h\"\r\n#include \"plumbing_server_client/AddInts.h\"\r\n/*\r\n    发布方实现：\r\n        1、包含头文件\r\n        2、初始化ROS节点\r\n        3、创建节点句柄\r\n        4、创建一个服务对象\r\n        5、处理请求并产生响应\r\n        6、spin()\r\n*/\r\nbool doNums(plumbing_server_client::AddInts::Request &request,plumbing_server_client::AddInts::Response &response) {\r\n    //1、处理请求\r\n    int num1=request.num1;\r\n    int num2=request.num2;\r\n    ROS_INFO(\"收到的请求数据：num1=%d,num2=%d\",num1,num2);\r\n    //2、组织响应\r\n    int sum = num1+num2;\r\n    response.sum=sum;\r\n    ROS_INFO(\"求和结果：sum=%d\",sum);\r\n    return true;\r\n}\r\nint main(int argc,char *argv[]){\r\n    setlocale(LC_ALL,\"\");\r\n    //3、初始化ros节点\r\n    ros::init(argc,argv,\"heishui\");//节点名称需唯一\r\n    //3、创建节点句柄\r\n    ros::NodeHandle nh;\r\n    //4、创建一个服务对象\r\n    ros::ServiceServer server = nh.advertiseService(\"addInts\",doNums);\r\n    ros::spin();\r\n    return 0;\r\n}`\r\n    var code20=`add_executable(demo01_server src/demo01_server.cpp)\r\ntarget_link_libraries(demo01_server\r\n  DDDDD{catkin_LIBRARIES}\r\n)\r\nadd_dependencies(demo01_server DDDDD{PROJECT_NAME}_gencpp)`\r\n    var code21=`#include \"ros/ros.h\"\r\n#include \"plumbing_server_client/AddInts.h\"\r\n/*\r\n    发布方实现：\r\n        1、包含头文件\r\n        2、初始化ROS节点\r\n        3、创建节点句柄\r\n        4、创建一个客户对象\r\n        5、提交请求并处理响应\r\n*/\r\n\r\nint main(int argc,char *argv[]){\r\n    setlocale(LC_ALL,\"\");\r\n    //3、初始化ros节点\r\n    ros::init(argc,argv,\"daBao\");//节点名称需唯一\r\n    //3、创建节点句柄\r\n    ros::NodeHandle nh;\r\n    //4、创建一个客户对象\r\n    ros::ServiceClient client=nh.serviceClient<plumbing_server_client::AddInts>(\"addInts\");\r\n    //5、提交请求并处理响应\r\n    plumbing_server_client::AddInts ai;\r\n    //1、组织请求\r\n    ai.request.num1=100;\r\n    ai.request.num2=200;\r\n    //2、处理响应\r\n    bool flag = client.call(ai);\r\n    if(flag){\r\n    ROS_INFO(\"响应成功\");\r\n    ROS_INFO(\"响应结果=%d\",ai.response.sum);\r\n    }else{\r\n    ROS_INFO(\"响应失败...\");\r\n    }\r\n    \r\n    return 0;\r\n}`\r\n    var code22=`add_executable(demo01_server src/demo01_server.cpp)\r\nadd_executable(demo02_client src/demo02_client.cpp)\r\n\r\n## Rename C++ executable without prefix\r\n## The above recommended prefix causes long target names, the following renames the\r\n## target back to the shorter version for ease of user use\r\n## e.g. \"rosrun someones_pkg node\" instead of \"rosrun someones_pkg someones_pkg_node\"\r\n# set_target_properties(DDDDD{PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX \"\")\r\n\r\n## Add cmake target dependencies of the executable\r\n## same as for the library above\r\nadd_dependencies(demo01_server DDDDD{PROJECT_NAME}_gencpp)\r\nadd_dependencies(demo02_client DDDDD{PROJECT_NAME}_gencpp)\r\n\r\n## Specify libraries to link a library or executable target against\r\ntarget_link_libraries(demo01_server\r\n  DDDDD{catkin_LIBRARIES}\r\n)\r\ntarget_link_libraries(demo02_client\r\n  DDDDD{catkin_LIBRARIES}\r\n)`\r\n    var code23=`#include \"ros/ros.h\"\r\n#include \"plumbing_server_client/AddInts.h\"\r\n/*\r\n    发布方实现：\r\n        1、包含头文件\r\n        2、初始化ROS节点\r\n        3、创建节点句柄\r\n        4、创建一个客户对象\r\n        5、提交请求并处理响应\r\n*/\r\n\r\nint main(int argc,char *argv[]){\r\n    setlocale(LC_ALL,\"\");\r\n    //3、初始化ros节点\r\n    if(argc!=3){\r\n        ROS_INFO(\"提交的参数个数不对\");\r\n        return 1;\r\n    }\r\n    ros::init(argc,argv,\"daBao\");//节点名称需唯一\r\n    //3、创建节点句柄\r\n    ros::NodeHandle nh;\r\n    //4、创建一个客户对象\r\n    ros::ServiceClient client=nh.serviceClient<plumbing_server_client::AddInts>(\"addInts\");\r\n    //5、提交请求并处理响应\r\n    plumbing_server_client::AddInts ai;\r\n    //1、组织请求\r\n    ai.request.num1=atoi(argv[1]);\r\n    ai.request.num2=atoi(argv[2]);\r\n    //2、处理响应\r\n    bool flag = client.call(ai);\r\n    if(flag){\r\n    ROS_INFO(\"响应成功\");\r\n    ROS_INFO(\"响应结果=%d\",ai.response.sum);\r\n    }else{\r\n    ROS_INFO(\"响应失败...\");\r\n    }\r\n\r\n    return 0;\r\n}`\r\n    var code24=`#！ /usr/bin/env python\r\nimport rospy\r\nfrom plumbing_server_client.srv import *\r\n\"\"\"\r\n    使用python实现消息发布：\r\n    1、导包\r\n    2、初始化ROS节点\r\n    3、创建服务器对象\r\n    4、处理逻辑回调函数\r\n    5、spin()\r\n\"\"\"\r\n#参数：封装了请求数据\r\ndef doNum(request):\r\n    #1.解析提交的两个整数\r\n    num1=request.num1\r\n    num2=request.num2\r\n    sum=num1+num2\r\n\r\n    response=AddIntsResponse()\r\n    response.sum=sum\r\n    rospy.loginfo(\"服务器解析的数据num1=%d，num2=%d,相应的结果：sum=%d\",num1,num2,sum)\r\n    return response\r\nif __name__==\"__main__\":\r\n    #2、初始化ROS节点：\r\n    rospy.init_node(\"heishui\")\r\n    #3、创建服务器对象\r\n    server=rospy.Service(\"addInts\",AddInts,doNum)\r\n    rospy.loginfo(\"服务器已经启动了\")\r\n    #4、回调函数处理数据\r\n    \r\n    #5、spin()\r\n    rospy.spin()`\r\n    var code25=`#！ /usr/bin/env python\r\nimport rospy\r\nfrom plumbing_server_client.srv import *\r\n\r\nif __name__==\"__main__\":\r\n    rospy.init_node(\"erhei\")\r\n    client=rospy.ServiceProxy(\"addInts\",AddInts)\r\n    response=client.call(12,34)\r\n    rospy.loginfo(\"相应的数据：%d\",response.sum)\r\n    \r\n    rospy.spin()`\r\n    var code26=`#！ /usr/bin/env python\r\nimport rospy\r\nfrom plumbing_server_client.srv import *\r\nimport sys\r\nif __name__==\"__main__\":\r\n    if len(sys.argv)!=3:\r\n        rospy.logerr(\"传入的参数个数不对\")\r\n        sys.exit(1)\r\n    rospy.init_node(\"erhei\")\r\n    client=rospy.ServiceProxy(\"addInts\",AddInts)\r\n    num1=int(sys.argv[1])\r\n    num2=int(sys.argv[2])\r\n    response=client.call(num1,num2)\r\n    rospy.loginfo(\"相应的数据：%d\",response.sum)\r\n    \r\n    rospy.spin()`\r\n    var code27=`#include \"ros/ros.h\"\r\n/*\r\n    需要实现参数的新增和修改\r\n    需求：首先设置机器人的共享参数，类型，半径（0.15m）\r\n        再修改半径（0.2m）\r\n    实现：\r\n        ros::NodeHandle\r\n            setParam(\"健\"，值)\r\n        ros::param\r\n            set(\"健\"，值)\r\n        修改，只需继续调用setparam或set\r\n */\r\nint main(int argc, char *argv[])\r\n{\r\n    ros::init(argc,argv,\"set_param_c\");\r\n    ros::NodeHandle nh;\r\n    //参数增---------------------------------\r\n    //方案1：nh\r\n    nh.setParam(\"type\",\"xiaohuang\");\r\n    nh.setParam(\"radius\",0.15);\r\n    //方案2：ros::param\r\n    ros::param::set(\"type_param\",\"xiaobai\");\r\n    ros::param::set(\"radius_param\",0.15);\r\n    //参数改---------------------------------\r\n    //方案1：nh\r\n    nh.setParam(\"radius\",0.2);\r\n    //方案2：ros::param\r\n    ros::param::set(\"radius_param\",0.25);\r\n    return 0;\r\n}\r\n\r\n`\r\n    var code28=`#include \"ros/ros.h\"\r\n/*\r\n     ros::NodeHandle\r\n        param(键,默认值) \r\n            存在，返回对应结果，否则返回默认值\r\n\r\n        getParam(键,存储结果的变量)\r\n            存在,返回 true,且将值赋值给参数2\r\n            若果键不存在，那么返回值为 false，且不为参数2赋值\r\n\r\n        getParamCached键,存储结果的变量)--提高变量获取效率\r\n            存在,返回 true,且将值赋值给参数2\r\n            若果键不存在，那么返回值为 false，且不为参数2赋值\r\n\r\n        getParamNames(std::vector<std::string>)\r\n            获取所有的键,并存储在参数 vector 中 \r\n\r\n        hasParam(键)\r\n            是否包含某个键，存在返回 true，否则返回 false\r\n\r\n        searchParam(参数1，参数2)\r\n            搜索键，参数1是被搜索的键，参数2存储搜索结果的变量\r\n\r\n    ros::param ----- 与 NodeHandle 类似\r\n */\r\nint main(int argc, char *argv[])\r\n{\r\n    setlocale(LC_ALL,\"\");\r\n    ros::init(argc,argv,\"get_param_c\");\r\n    ros::NodeHandle nh;\r\n    //roshandle实现,param实现不做演示------------------------\r\n    //1、param\r\n    double radius=nh.param(\"radius\",0.5);\r\n    ROS_INFO(\"radius=%.2f\",radius);\r\n    //2、getparam\r\n    double radius2=0.0;\r\n    bool result = nh.getParam(\"radiusxxxx\",radius2);\r\n    if(result){\r\n        ROS_INFO(\"获取的半径是：%.2f\",radius2);\r\n    }else{\r\n        ROS_INFO(\"被查询的变量不存在。\");\r\n    }\r\n    //3、getParamNames\r\n    std::vector<std::string>names;\r\n    nh.getParamNames(names);\r\n    for(auto &&name:names){\r\n        ROS_INFO(\"遍历的元素：%s\",name.c_str());\r\n    }\r\n    //4、hasParam\r\n    bool flag1=nh.hasParam(\"radius\");\r\n    bool flag2=nh.hasParam(\"radiusxxx\");\r\n    ROS_INFO(\"radius 存在吗？ %d\",flag1);\r\n    ROS_INFO(\"radiusxxx 存在吗？ %d\",flag2);\r\n    //5、searchParam\r\n    std::string key;\r\n    nh.searchParam(\"radius\",key);\r\n    ROS_INFO(\"搜索结果：%s\",key.c_str());\r\n    return 0;\r\n}\r\n`\r\n    var code29=`#include \"ros/ros.h\"\r\n/*\r\n     roshandle:delParam()\r\n     del()\r\n */\r\nint main(int argc, char *argv[])\r\n{\r\n    setlocale(LC_ALL,\"\");\r\n    ros::init(argc,argv,\"param_del_c\");\r\n    ros::NodeHandle nh;\r\n    //roshandle实现------------------------\r\n    bool flag1=nh.deleteParam(\"radius\");//返回是否删除成功\r\n    if(flag1){\r\n        ROS_INFO(\"删除成功！\");\r\n    }else{ROS_INFO(\"删除失败！\");}\r\n    //param实现------------------------\r\n    bool flag2=ros::param::del(\"radius_param\");\r\n    if(flag2){\r\n        ROS_INFO(\"radius_param 删除成功！\");\r\n    }else{ROS_INFO(\"radius_param 删除失败！\");}\r\n    return 0;\r\n}\r\n`\r\n    var code30=`#！ /usr/bin/env python\r\nimport rospy\r\n\r\nif __name__==\"__main__\":\r\n    rospy.init_node(\"param_set_p\")\r\n    rospy.set_param(\"type_p\",\"xiaohuangche\")\r\n    rospy.set_param(\"radius_p\",0.15)\r\n    `\r\n    var code31=`#！ /usr/bin/env python\r\nimport rospy\r\n\"\"\" \r\n    get_param(键,默认值)\r\n    当键存在时，返回对应的值，如果不存在返回默认值\r\n    get_param_cached   只是效率高\r\n    get_param_names  获取所有的参数的健的集合\r\n    has_param  判断是否包含某个健\r\n    search_param查找某个参数的健名\r\n\"\"\"\r\nif __name__==\"__main__\":\r\n    rospy.init_node(\"get_param_p\")\r\n    #1、get_param\r\n    radius=rospy.get_param(\"radius_p\",0.5)\r\n    radius2=rospy.get_param(\"radius_pxxx\",0.5)\r\n    rospy.loginfo(\"radius = %.2f\",radius)\r\n    rospy.loginfo(\"radius2 = %.2f\",radius2)\r\n    #2、get_param_cached\r\n    #....\r\n    #3、get_param_names\r\n    names=rospy.get_param_names()\r\n    for name in names:\r\n        rospy.loginfo(\"name=%s\",name)\r\n    #4、has_param\r\n    flag1=rospy.has_param(\"radius_p\")\r\n    if flag1:\r\n        rospy.loginfo(\"radius_p 存在\")\r\n    else:\r\n        rospy.loginfo(\"radius_p 不存在\")\r\n    flag1=rospy.has_param(\"radius_pxxx\")\r\n    if flag1:\r\n        rospy.loginfo(\"radius_pxxx 存在\")\r\n    else:\r\n        rospy.loginfo(\"radius_pxxx 不存在\")\r\n    #5、search_param\r\n\r\n\r\n    `\r\n    var code32=``\r\n    var code33=``\r\n    var code34=``\r\n    var code35=``\r\n    var code36=``\r\n    var code37=``\r\n    var code38=``\r\n    var code39=``\r\n    var v1=ref(false)\r\n    var v2=ref(false)\r\n    var v3=ref(false)\r\n    var v4=ref(false)\r\n    var v5=ref(false)\r\n    var v6=ref(false)\r\n    var v7=ref(false)\r\n    var v8=ref(false)\r\n    var v9=ref(false)\r\n    var v10=ref(false)\r\n    var v11=ref(false)\r\n    var v12=ref(false)\r\n    var v13=ref(false)\r\n    var v14=ref(false)\r\n    var v15=ref(false)\r\n    var v16=ref(false)\r\n    var v17=ref(false)\r\n    var v18=ref(false)\r\n    var v19=ref(false)\r\n    var v20=ref(false)\r\n    var v21=ref(false)\r\n    var v22=ref(false)\r\n    var v23=ref(false)\r\n    var v24=ref(false)\r\n    var v25=ref(false)\r\n    var v26=ref(false)\r\n    var v27=ref(false)\r\n    var v28=ref(false)\r\n    var v29=ref(false)\r\n    var v30=ref(false)\r\n    var v31=ref(false)\r\n    var v32=ref(false)\r\n    var v33=ref(false)\r\n    var v34=ref(false)\r\n    var v35=ref(false)\r\n    var v36=ref(false)\r\n    var v37=ref(false)\r\n    var v38=ref(false)\r\n    var v39=ref(false)\r\n  \r\n    </script>\r\n    <style  scoped>\r\n    </style>\r\n  ","import script from \"./roscases.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./roscases.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>实操1：话题发布</strong></template>\r\n      需求：实现乌龟运动控制，让乌龟作圆周运动<br/>\r\n      通过rosrun turtlesim turtlesim_node<br/>\r\n      rosrun turtlesim turtle_teleop_key来启动小乌龟<br/>\r\n      通过rostopic info /turtle1/cmd_vel看到话题下的消息类型、发布方、接收方<br/>\r\n      通过rosmsg show geometry_msgs/Twist来显示消息的格式。其中linear是线速度，angular是角速度。对于乌龟来说，只有x方向的线速度，只有z方向的角速度，也就是偏航。偏航z：左右，俯仰y：上下，翻滚x：旋转<br/>\r\n      通过rostopic echo /turtle1/cmd_vel来显示乌龟速度<br/><br/>\r\n\r\n      \r\n      1、极简实现：rostopic pub -r 10 /turtle1/cmd_vel geometry_msgs/Twist<br/>\r\n      2、C++实现：<highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code1\"></highlightjs>\r\n      3、Python实现：<highlightjs  language=\"python\" :autodetect=\"false\" :code=\"code2\"></highlightjs>\r\n    </el-card>\r\n    \r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>实操2：话题订阅</strong></template>\r\n      需求：已知turtlesim中的乌龟显示节点，会发布当前乌龟的位姿(窗体中乌龟的坐标以及朝向)，要求控制乌龟运动，并时时打印当前乌龟的位姿。<br/>\r\n     新建一个launch文件夹，写入内容：<highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code3\"></highlightjs>\r\n     执行source ./devel/setup.bash<br/>\r\n     和roslaunch plumbing_test start_turtle.launch <br/>\r\n     获取乌龟位置信息：<br/>\r\n     方法1：rostopic echo /turtle1/pose<br/>\r\n     方法2C++：创建文件test02_sub_pose.cpp<highlightjs  language=\"python\" :autodetect=\"false\" :code=\"code4\"></highlightjs>\r\n     配置文件从上到下依次修改add_executable、add_dependencies、target_link_libraries，一套操作然后roslaunch plumbing_test start_turtle.launch <br/>\r\n     \r\n     新开一个终端，一套操作然后执行rosrun plumbing_test test02_sub_pose<br/>\r\n     方法2python：<highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code5\"></highlightjs>\r\n    </el-card>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>实操3:服务调用</strong></template>\r\n      需求：    编码实现向 turtlesim 发送请求，在乌龟显示节点的窗体指定位置生成一乌龟，这是一个服务请求操作。<br/>\r\n        把乌龟运行起来后，新开终端输入rosservice call /spawn 1.0 4.0 1.57 turtle2就会产生一只新乌龟<br/>\r\n            实现服务调用（C++）：<highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code6\"></highlightjs>\r\n            实现服务调用（python）：<highlightjs  language=\"python\" :autodetect=\"false\" :code=\"code7\"></highlightjs>\r\n\r\n        </el-card>\r\n        <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>实操4:参数设置</strong></template>\r\n      需求：<br/>\r\n            （C++）：先rosrun plumbing_test test04_param，再rosrun turtlesim turtlesim_node，颜色就是黑了<highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code8\"></highlightjs>\r\n            （python）：<highlightjs  language=\"python\" :autodetect=\"false\" :code=\"code9\"></highlightjs>\r\n            <a href=\"http://www.autolabor.com.cn/book/ROSTutorials/di-2-zhang-ros-jia-gou-she-ji/25-tong-xin-ji-zhi-shi-cao/254-shi-cao-04-can-shu-she-zhi.html\" _target=\"blank\">----其他方法在这里看，还可以命令行实现、启动时自带参数、launch文件传参等----</a>\r\n        </el-card>\r\n        <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>API(C++)</strong></template>\r\n      初始化函数:在rosrun时，后面跟_heigth:=2001,那么ros就可以加以使用，使用rosparam list可以看到刚刚发布的/xxxx/height，再rosparam get /xxxx/height就可以得到值\r\n\r\n      节点名称要唯一，所以同一个节点不能重复启动。结果：ros中后一个同名节点会把前一个挤掉，需求：一个节点多次启动且能正常运行\r\n      ros::init(argc,argv,\"erGouZi\",ros::init_options::AnonymousName);这样就可以多次运行。\r\n      可以用rosnode list 来看一下，可以看到两个erGouzi，但后面跟着一串序号\r\n\r\n      保存发送方发送的最后一条数据：先启动发送方，发送方发送了一系列数据。结束之后在启动接收方，什么也没有收到。加了最后的true（latch=true）：\r\n      {{ code10 }}\r\n      后，就可以保存发送放的最后一条数据（服务器必须依旧开着，即程序控制发送，但是不能ctrl+c）\r\n\r\n      spin和spinOnce的区别：spin后面的代码不会执行，spinonce后面的代码会执行\r\n\r\n设置时间：<highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code11\"></highlightjs>\r\n日志：<a href=\"http://www.autolabor.com.cn/book/ROSTutorials/di-3-zhang-ros-tong-xin-ji-zhi-jin-jie/31/316-qi-ta-han-shu.html\" _target=\"blank\">----网址----</a>\r\n\r\n            </el-card>\r\n\r\n            <el-card>\r\n            <template #header><strong>API(Python)</strong></template>\r\n                初始化函数:\r\n                def init_node(name, argv=None, anonymous=False, log_level=None, disable_rostime=False, disable_rosout=False, disable_signals=False, xmlrpc_port=0, tcpros_port=0):\r\n            ......\r\n\r\n            </el-card>\r\n            <el-card>\r\n            <template #header><strong>C++自定义头文件调用</strong></template>\r\n            一、引用头文件\r\n                1、在plumbing_head/include/plumbing_head下创建hello.h：<highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code12\"></highlightjs>\r\n                2、配置c_cpp_properties.json的includePath，加入当前include的路径\r\n                3、src下创建hello.cpp：\r\n                <highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code13\"></highlightjs>\r\n                cmakelist一系列。因为修改了配置文件，所以要把include_directories里的include解除注释\r\n            二、引用源文件\r\n                1、hello.cpp改为：<highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code15\"></highlightjs>\r\n                2、创建usehello.cpp：<highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code16\"></highlightjs>\r\n                3、更改makelist，注意，这次改了不少：<highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code14\"></highlightjs>\r\n                4、配置c_cpp_properties.json的includePath、hello.h与 一 中一致\r\n\r\n            </el-card>\r\n            <el-card>\r\n            <template #header><strong>Python引用别的包</strong></template>\r\n                1、scripts中创建tools.py，内容就两行：#！ /usr/bin/env python  num=100\r\n                2、在另一个.py文件中导入：import tools\r\n                3、加入rospy.loginfo(\"num=%d\",tools.num)\r\n                4、cmakelist中引入tools.py\r\n未能成功，报错：AttributeError: module 'tools' has no attribute 'num'无法解决/(ㄒoㄒ)/~~\r\n\r\n            </el-card>\r\n</template>\r\n<script setup>\r\nvar code1=`#include \"ros/ros.h\"\r\n#include \"geometry_msgs/Twist.h\"\r\nint main(int argc, char  *argv[])\r\n{\r\n    ros::init(argc,argv,\"my_control\");\r\n    ros::NodeHandle nh;\r\n    ros::Publisher pub=nh.advertise<geometry_msgs::Twist>(\"/turtle1/cmd_vel\",10);\r\n    ros::Rate rate(10);\r\n    geometry_msgs::Twist twist;\r\n    twist.linear.x=2.0;\r\n    twist.linear.y=0.0;\r\n    twist.linear.z=0.0;\r\n    twist.angular.x=0.0;\r\n    twist.angular.y=0.0;\r\n    twist.angular.z=2.0;\r\n    while(ros::ok()){\r\n        pub.publish(twist);\r\n        rate.sleep();\r\n        ros::spinOnce();\r\n    }\r\n    return 0;\r\n}\r\n`\r\nvar code2=`#！ /usr/bin/env python\r\nimport rospy\r\nfrom geometry_msgs.msg import Twist\r\n\r\n\r\nif __name__==\"__main__\":\r\n    #2、初始化ROS节点：\r\n    rospy.init_node(\"heishui\")\r\n    pub=rospy.Publisher(\"/turtle1/cmd_vel\",Twist,queue_size=10)\r\n    rate=rospy.Rate(10)\r\n    twist=Twist()\r\n    twist.linear.x=0.5\r\n    twist.linear.y=0.0\r\n    twist.linear.z=0.0\r\n    twist.angular.x=0.0\r\n    twist.angular.y=0.0\r\n    twist.angular.z=0.5\r\n    while not rospy.is_shutdown():\r\n        pub.publish(twist)\r\n        rate.sleep()`\r\nvar code3=`<launch>\r\n<node pkg=\"turtlesim\" type=\"turtlesim_node\" name =\"turtle1\" output=\"screen\"/>\r\n<node pkg=\"turtlesim\" type=\"turtle_teleop_key\" name =\"key\" output=\"screen\"/>\r\n</launch>`\r\nvar code4=`#include \"ros/ros.h\"\r\n#include \"turtlesim/Pose.h\"\r\nvoid doPose(const turtlesim::Pose::ConstPtr &pose){\r\n    ROS_INFO(\"乌龟的位资信息：坐标（%.2f，%.2f），朝向（%.2f），线速度：%.2f，角速度：%.2f\",pose->x,pose->y,pose->theta, pose->linear_velocity,pose->angular_velocity);\r\n}\r\nint main(int argc, char  *argv[])\r\n{\r\n    setlocale(LC_ALL,\"\");\r\n    ros::init(argc,argv,\"sub_pose\");\r\n    ros::NodeHandle nh;\r\n    ros::Subscriber sub=nh.subscribe(\"/turtle1/pose\",100,doPose);\r\n    ros::spin();\r\n    \r\n    return 0;\r\n}\r\n`\r\nvar code5=`#include \"ros/ros.h\"\r\n#include \"turtlesim/Pose.h\"\r\nvoid doPose(const turtlesim::Pose::ConstPtr &pose){\r\n    ROS_INFO(\"乌龟的位资信息：坐标（%.2f，%.2f），朝向（%.2f），线速度：%.2f，角速度：%.2f\",pose->x,pose->y,pose->theta, pose->linear_velocity,pose->angular_velocity);\r\n}\r\nint main(int argc, char  *argv[])\r\n{\r\n    setlocale(LC_ALL,\"\");\r\n    ros::init(argc,argv,\"sub_pose\");\r\n    ros::NodeHandle nh;\r\n    ros::Subscriber sub=nh.subscribe(\"/turtle1/pose\",100,doPose);\r\n    ros::spin();\r\n    \r\n    return 0;\r\n}\r\n`\r\nvar code6=`#include \"ros/ros.h\"\r\n#include \"turtlesim/Spawn.h\"\r\nint main(int argc, char  *argv[])\r\n{\r\n    setlocale(LC_ALL,\"\");\r\n    ros::init(argc,argv,\"sub_pose\");\r\n    ros::NodeHandle nh;\r\n    ros::ServiceClient client = nh.serviceClient<turtlesim::Spawn>(\"/spawn\");\r\n    turtlesim::Spawn spawn;\r\n    spawn.request.x=1.0;\r\n    spawn.request.y=4.0;\r\n    spawn.request.theta=1.57;\r\n    spawn.request.name=\"turtle2\";\r\n\r\n    client.waitForExistence();\r\n    bool flag=client.call(spawn);\r\n    if(flag){\r\n        ROS_INFO(\"乌龟生成成功，新乌龟叫：%s\",spawn.response.name.c_str());\r\n    }else{ROS_INFO(\"生成失败！\");}\r\n    \r\n    return 0;\r\n}\r\n`\r\nvar code7=`#! /usr/bin/env python\r\n\"\"\"\r\n    生成一只小乌龟\r\n    准备工作:\r\n        1.服务话题 /spawn\r\n        2.服务消息类型 turtlesim/Spawn\r\n        3.运行前先启动 turtlesim_node 节点\r\n\r\n    实现流程:\r\n        1.导包\r\n          需要包含 turtlesim 包下资源，注意在 package.xml 配置\r\n        2.初始化 ros 节点\r\n        3.创建 service 客户端\r\n        4.等待服务启动\r\n        5.发送请求\r\n        6.处理响应\r\n\r\n\"\"\"\r\n\r\nimport rospy\r\nfrom turtlesim.srv import Spawn,SpawnRequest,SpawnResponse\r\n\r\nif __name__ == \"__main__\":\r\n    # 2.初始化 ros 节点\r\n    rospy.init_node(\"service_call_p\")\r\n    # 3.创建 service 客户端\r\n    client = rospy.ServiceProxy(\"/spawn\",Spawn)\r\n    # 4.等待服务启动\r\n    client.wait_for_service()\r\n    # 5.发送请求\r\n    req = SpawnRequest()\r\n    req.x = 2.0\r\n    req.y = 2.0\r\n    req.theta = -1.57\r\n    req.name = \"turtle3\"\r\n    try:\r\n        response = client.call(req)\r\n        # 6.处理响应\r\n        rospy.loginfo(\"乌龟创建成功!，叫:%s\",response.name)\r\n    except Exception as e:\r\n        rospy.loginfo(\"服务调用失败\")`\r\nvar code8=`/*\r\n    注意命名空间的使用。\r\n\r\n*/\r\n#include \"ros/ros.h\"\r\n\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    ros::init(argc,argv,\"change_bgColor\");\r\n\r\n    ros::NodeHandle nh(\"turtlesim\");\r\n    //ros::NodeHandle nh;\r\n\r\n    // ros::param::set(\"/turtlesim/background_r\",0);\r\n    // ros::param::set(\"/turtlesim/background_g\",0);\r\n    // ros::param::set(\"/turtlesim/background_b\",0);\r\n\r\n    nh.setParam(\"background_r\",0);\r\n    nh.setParam(\"background_g\",0);\r\n    nh.setParam(\"background_b\",0);\r\n\r\n\r\n    return 0;\r\n}`\r\nvar code9=`#! /usr/bin/env python\r\n\r\nimport rospy\r\n\r\nif __name__ == \"__main__\":\r\n    rospy.init_node(\"change_bgColor_p\")\r\n    rospy.set_param(\"/turtlesim/background_r\",255)\r\n    rospy.set_param(\"/turtlesim/background_g\",255)\r\n    rospy.set_param(\"/turtlesim/background_b\",255)`\r\nvar code10=`    ros::Publisher pub = nh.advertise<std_msgs::String>(\"fangzi\",10,true);//可以通过rostopic echo fangzi 来查看发布的话题\r\n`\r\nvar code11=`   #include \"ros/ros.h\"\r\n\r\nvoid cb(const ros::TimerEvent& event){\r\n    ROS_INFO(\"-----------------\");\r\n    ROS_INFO(\"函数被调用的时刻：%.2f\",event.current_real.toSec());\r\n}\r\n\r\nint main(int argc,char *argv[]){\r\n    setlocale(LC_ALL,\"\");\r\n    ros::init(argc,argv,\"hello_time\");\r\n    ros::NodeHandle nh;\r\n    //1、获取当前时间\r\n    ros::Time right_now=ros::Time::now();\r\n    ROS_INFO(\"当前时刻：%.2f\",right_now.toSec());//获取距离 1970年01月01日 00:00:00 的秒数\r\n    ROS_INFO(\"当前时刻：%d\",right_now.sec);//获取距离 1970年01月01日 00:00:00 的秒数\r\n\r\n    //2、设置当前时刻\r\n    ros::Time t1(100.35);\r\n    ROS_INFO(\"t1 = %.2f\",t1.toSec());\r\n\r\n    //持续时间-----------------------------------\r\n    //1、程序执行中停顿五秒\r\n    ros::Time start=ros::Time::now();\r\n    ROS_INFO(\"开始休眠：%.2f\",start.toSec());\r\n\r\n    ros::Duration du(4.5);\r\n    du.sleep();\r\n\r\n    ros::Time end=ros::Time::now();\r\n    ROS_INFO(\"休眠结束：%.2f\",end.toSec());\r\n\r\n    //时间运算------------------------------------\r\n    ros::Time begin=ros::Time::now();\r\n    ros::Duration du1(5);\r\n    ros::Time stop=begin+du1;\r\n    ROS_INFO(\"当前时刻：%.2f\",begin.toSec());\r\n    ROS_INFO(\"当前时刻：%.2f\",stop.toSec());\r\n    ros::Duration du2=begin-stop;\r\n    ROS_INFO(\"时刻相减：%.2f\",du2.toSec());\r\n    ros::Duration du3=du1-du2;\r\n    ros::Duration du4=du1+du2;\r\n    ROS_INFO(\"du1-du2：%.2f\",du3.toSec());\r\n    ROS_INFO(\"du1+du2：%.2f\",du4.toSec());\r\n\r\n    //设置运行频率--------------------------------\r\n    // ros::Rate rate(1);//指定频率\r\n    // while (true)\r\n    // {\r\n    //     ROS_INFO(\"-----------code----------\");\r\n    //     rate.sleep();//休眠，休眠时间 = 1 / 频率。\r\n    // }\r\n\r\n    //定时器--------------------------------------\r\n    ros::Timer timer = nh.createTimer(ros::Duration(0.5),cb,true,false);//后面两个bool，前一个是是否只执行一次，后一个是是否自动启动，若填了false，就要后面timer.start();    ros::spin();//前面有回调函数cb，故要spin\r\n    return 0;\r\n}`\r\nvar code12=`#ifndef _HELLO_H\r\n#define _HELLO_H\r\n\r\nnamespace hello_ns{\r\n\r\nclass HelloPub {\r\n\r\npublic:\r\n    void run();\r\n};\r\n\r\n}\r\n\r\n#endif`\r\nvar code13=`#include \"ros/ros.h\"\r\n#include \"plumbing_head/hello.h\"\r\n\r\nnamespace hello_ns {\r\n\r\nvoid HelloPub::run(){\r\n    ROS_INFO(\"自定义头文件的使用....\");\r\n}\r\n\r\n}\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    setlocale(LC_ALL,\"\");\r\n    ros::init(argc,argv,\"test_head_node\");\r\n    hello_ns::HelloPub helloPub;\r\n    helloPub.run();\r\n    return 0;\r\n}`\r\nvar code14=`## Specify additional locations of header files\r\n## Your package locations should be listed before other locations\r\ninclude_directories(\r\ninclude\r\n  DDDDD{catkin_INCLUDE_DIRS}\r\n)\r\n\r\n## Declare a C++ library\r\nadd_library(head_src\r\n  include/DDDDD{PROJECT_NAME}/hello.h\r\n  src/hello.cpp\r\n)\r\n\r\n## Add cmake target dependencies of the library\r\n## as an example, code may need to be generated before libraries\r\n## either from message generation or dynamic reconfigure\r\n# add_dependencies(DDDDD{PROJECT_NAME} DDDDD{DDDDD{PROJECT_NAME}_EXPORTED_TARGETS} DDDDD{catkin_EXPORTED_TARGETS})\r\n\r\n## Declare a C++ executable\r\n## With catkin_make all packages are built within a single CMake context\r\n## The recommended prefix ensures that target names across packages don't collide\r\n\r\nadd_executable(usehello src/usehello.cpp)\r\n\r\n## Rename C++ executable without prefix\r\n## The above recommended prefix causes long target names, the following renames the\r\n## target back to the shorter version for ease of user use\r\n## e.g. \"rosrun someones_pkg node\" instead of \"rosrun someones_pkg someones_pkg_node\"\r\n# set_target_properties(DDDDD{PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX \"\")\r\n\r\n## Add cmake target dependencies of the executable\r\n## same as for the library above\r\nadd_dependencies(head_src DDDDD{DDDDD{PROJECT_NAME}_EXPORTED_TARGETS} DDDDD{catkin_EXPORTED_TARGETS})\r\n\r\n## Specify libraries to link a library or executable target against\r\ntarget_link_libraries(head_src\r\n  DDDDD{catkin_LIBRARIES}\r\n)\r\ntarget_link_libraries(usehello\r\nhead_src\r\n  DDDDD{catkin_LIBRARIES}\r\n)`\r\n\r\nvar code15=`#include \"ros/ros.h\"\r\n#include \"plumbing_head/hello.h\"\r\n\r\nnamespace hello_ns {\r\n\r\nvoid HelloPub::run(){\r\n    ROS_INFO(\"yyy\");\r\n}\r\n}`\r\nvar code16=`#include \"ros/ros.h\"\r\n#include \"plumbing_head/hello.h\"\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    ros::init(argc,argv,\"hahah\");\r\n    hello_ns::HelloPub my;\r\n    my.run();\r\n    return 0;\r\n}`\r\nvar code17=``\r\nvar code18=``\r\nvar code19=``\r\n\r\n</script>\r\n<style  scoped>\r\n</style>","import script from \"./rosreality.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./rosreality.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>ros内置的模拟机器人使用及操控</strong></template>\r\n      \r\n      配置环境：<br/>\r\n      \r\n      新建项目记得ctrl+shift+b，配置一下build<br/>\r\n      进入<el-text type=\"primary\" size=\"large\" @click=\"copyClick(c1)\">~/catkin_ws/src</el-text>→执行<el-text type=\"primary\" size=\"large\" @click=\"copyClick(c2)\">git clone https://github.com/6-robot/wpr_simulation.git</el-text>→进入<el-text type=\"primary\" size=\"large\" @click=\"copyClick(c3)\">~/catkin_ws/src/wpr_simulation/scripts</el-text>\r\n     →<br/>执行<el-text type=\"primary\" size=\"large\" @click=\"copyClick(c4)\">./install_for_noetic.sh</el-text>→回到<el-text type=\"primary\" size=\"large\" @click=\"copyClick(c5)\">catkin_ws</el-text>→重新<el-text type=\"primary\" size=\"large\" @click=\"copyClick(c6)\">catkin_make,source devel/setup.bash</el-text>→执行<el-text type=\"primary\" size=\"large\" @click=\"copyClick(c7)\">roslaunch wpr_simulation wpb_simple.launch</el-text>→<br/>出现机器人界面→新开一个终端，执行<el-text type=\"primary\" size=\"large\" @click=\"copyClick(c8)\">rosrun wpr_simulation demo_vel_ctrl</el-text>→机器人动起来了，完成。\r\n     <br/><br/>创建项目（C++）：<br/>\r\n        先进入<el-text type=\"primary\" size=\"large\" @click=\"copyClick(c9)\">catkin_ws/src</el-text>，然后<el-text type=\"primary\" size=\"large\" @click=\"copyClick(c10)\">catkin_create_pkg vel_pkg roscpp rospy geometry_msgs</el-text>,用code打开，新建vel_node.cpp:<br/>\r\n        <el-button type=\"primary\" size=\"default\"  @click=\"if(v1==false)v1=true;else v1=false;\" plain>代码</el-button><br/><highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code1\"  v-show=\"v1\"></highlightjs>\r\n        修改CMakeLists<br/>\r\n        先<el-text type=\"primary\" size=\"large\" @click=\"copyClick(c12)\">roslaunch wpr_simulation wpb_simple.launch</el-text>，再<el-text type=\"primary\" size=\"large\" @click=\"copyClick(c13)\">rosrun vel_pkg vel_node</el-text>，就控制成功了<br/>\r\n        <br/><br/>创建项目（python）：<br/>\r\n        创建scripts文件夹，创建vel_node.py：<br/>\r\n        <el-button type=\"primary\" size=\"default\"  @click=\"if(v2==false)v2=true;else v2=false;\" plain>代码</el-button><br/><highlightjs  language=\"python\" :autodetect=\"false\" :code=\"code2\"  v-show=\"v2\"></highlightjs>\r\n    </el-card>\r\n\r\n<el-divider></el-divider>\r\n    <el-card style=\"max-width: 1200px\">\r\n    <template #header><strong>rviz（激光可视化工具）</strong></template>\r\n先在<el-text type=\"primary\" size=\"large\" @click=\"copyClick(c15)\">~/</el-text>目录下<el-text type=\"primary\" size=\"large\" @click=\"copyClick(c16)\">roslaunch wpr_simulation wpb_simple.launch</el-text>，再执行<el-text type=\"primary\" size=\"large\" @click=\"copyClick(c17)\">rviz</el-text>,就会弹出界面。<br/>\r\n如果执行<el-text type=\"primary\" size=\"large\" @click=\"copyClick(c18)\">roslaunch wpr_simulation wpb_simple.launch</el-text>报错，可以重新<el-text type=\"primary\" size=\"large\" @click=\"copyClick(c19)\">catkin_make、source</el-text>。<br/>\r\n\r\n关掉roscore再重启一下。进入rviz之后，点击add→robotmodel→ok→报错→把fixedFrame的名字改为base_link→add→laserscan→选择laserscan条目里的topic，选择话题名称/scan→把size改成0.03，就挺明显了<br/>\r\ngazebo是模拟虚拟机器人发出传感器数据的工具<br/>\r\nrviz是接受传感器数据并进行显示的工具<br/>\r\n进入gazebo→点击工具栏圆柱图标→放进去→进入rviz，可以看到有轮廓显示出来<br/>\r\n要想保存rviz配置，可以：file→save config as →找个目录保存→下次打开→file→open config→刚才的目录里的xxx.rviz，就有了<br/>\r\n\r\n    </el-card>\r\n    <el-card style=\"max-width: 1200px\">\r\n    <template #header><strong>获取激光雷达数据</strong></template>\r\n    C++：<br/>\r\n        先启动gazebo，然后执行示例rosrun wpr_simulation demo_lidar_data，可以看到很多数据.接下来用c++来实现。<br/>\r\n        新建一个包，依赖为：roscpp rospy sensor_msgs<br/>\r\n        c++文件：<br/><el-button type=\"primary\" size=\"default\"  @click=\"if(v3==false)v3=true;else v3=false;\" plain>代码</el-button><br/><highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code3\"  v-show=\"v3\"></highlightjs>\r\n        启动gazebo→执行rosrun lidar_pkg lidar_node→看到输出的。点击导航栏的十字图标→点击柜子→移动柜子→输出的值改变<br/>\r\npy：<br/>\r\npy也有类似的库：rosrun wpr_simulation demo_lidar_data.py<br/>\r\n建包的依赖和c++一样<br/>\r\npy：<br/><el-button type=\"primary\" size=\"default\"  @click=\"if(v4==false)v4=true;else v4=false;\" plain>代码</el-button><br/><highlightjs  language=\"python\" :autodetect=\"false\" :code=\"code4\"  v-show=\"v4\"></highlightjs>\r\n\r\n    </el-card>===\r\n    <el-card style=\"max-width: 1200px\">\r\n    <template #header><strong>实现激光雷达避障</strong></template>\r\n    C++：<br/>\r\n        先启动gazebo，c++代码：<br/>\r\n        <el-button type=\"primary\" size=\"default\"  @click=\"if(v5==false)v5=true;else v5=false;\" plain>代码</el-button><br/>\r\n        <highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code5\"  v-show=\"v5\"></highlightjs>\r\n      py:<br/><el-button type=\"primary\" size=\"default\"  @click=\"if(v6==false)v6=true;else v6=false;\" plain>代码</el-button><br/>\r\n      <highlightjs  language=\"python\" :autodetect=\"false\" :code=\"code6\"  v-show=\"v6\"></highlightjs>\r\n    </el-card>\r\n\r\n    <el-card style=\"max-width: 1200px\">\r\n    <template #header><strong>实现IMU数据获取</strong></template>\r\n    C++：<br/>\r\n        先启动gazebo，c++代码：<br/>\r\n        <el-button type=\"primary\" size=\"default\"  @click=\"if(v7==false)v7=true;else v7=false;\" plain>代码</el-button><br/>\r\n        <highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code7\"  v-show=\"v7\"></highlightjs>\r\n      py:<br/><el-button type=\"primary\" size=\"default\"  @click=\"if(v8==false)v8=true;else v8=false;\" plain>代码</el-button><br/>\r\n      <highlightjs  language=\"python\" :autodetect=\"false\" :code=\"code8\"  v-show=\"v8\"></highlightjs>\r\n    </el-card>\r\n\r\n    <el-card style=\"max-width: 1200px\">\r\n    <template #header><strong>实现IMU航向锁定</strong></template>\r\n    C++：<br/>\r\n        先启动gazebo，c++代码：<br/>\r\n        <el-button type=\"primary\" size=\"default\"  @click=\"if(v9==false)v9=true;else v9=false;\" plain>代码</el-button><br/>\r\n        <highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code9\"  v-show=\"v9\"></highlightjs>\r\n      py:<br/><el-button type=\"primary\" size=\"default\"  @click=\"if(v10==false)v10=true;else v10=false;\" plain>代码</el-button><br/>\r\n      <highlightjs  language=\"python\" :autodetect=\"false\" :code=\"code10\"  v-show=\"v10\"></highlightjs>\r\n    </el-card>\r\n    <el-card style=\"max-width: 1200px\"><template #header><strong>生成自定义消息类型</strong></template>\r\n   建包依赖：roscpp rospy std_msgs message_generation message_runtime<br/>\r\n   建文件夹msg→msg下建文件xxx.msg:<br/><el-button type=\"primary\" size=\"default\"  @click=\"if(v11==false)v11=true;else v11=false;\" plain>代码</el-button><br/>\r\n   <highlightjs  language=\"python\" :autodetect=\"false\" :code=\"code11\"  v-show=\"v11\"></highlightjs>\r\n   →配置cmakelist：add_message_files解除注释，下面的两个.msg文件换成刚刚的xxx.msg，把generate_messages取消注释，把catkin_package的CATKIN_DEPENDS......一行取消注释<br/>\r\n→package.xml中后面，build_depend和exec_depend，message_generation和message_runtime两个都要有两个<br/>\r\n→rosmsg show qq_msgs/carry→显示消息结构<br/>\r\n</el-card>\r\n    <el-card style=\"max-width: 1200px\"><template #header><strong>使用自定义消息类型</strong></template>\r\n        主要还是配置！前面写了一大堆，看前面就好了<br/>\r\n        C++发送方：<br/><br/><el-button type=\"primary\" size=\"default\"  @click=\"if(v13==false)v13=true;else v13=false;\" plain>代码</el-button><br/>\r\n        <highlightjs  language=\"C++\" :autodetect=\"false\" :code=\"code13\"  v-show=\"v13\"></highlightjs>\r\n        C++接收方：<br/><br/><el-button type=\"primary\" size=\"default\"  @click=\"if(v14==false)v14=true;else v14=false;\" plain>代码</el-button><br/>\r\n        <highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code14\"  v-show=\"v14\"></highlightjs>\r\n    </el-card>\r\n\r\n    <el-card style=\"max-width: 1200px\"><template #header><strong>发布自定义地图</strong></template>\r\n        C++：<br/>\r\n        创建包：rospy roscpp nav_msgs<br/>\r\n        map_pub_node代码：<br/><el-button type=\"primary\" size=\"default\"  @click=\"if(v12==false)v12=true;else v12=false;\" plain>代码</el-button><br/>\r\n        <highlightjs  language=\"c++\" :autodetect=\"false\" :code=\"code12\"  v-show=\"v12\"></highlightjs>\r\n        运行，然后运行rviz→add→Axes→add→Map→Map的topic设置为/map，地图已经显示<br/>\r\n        Python:<br/>\r\n        流程一致，代码：<br/><el-button type=\"primary\" size=\"default\"  @click=\"if(v15==false)v15=true;else v15=false;\" plain>代码</el-button><br/>\r\n        <highlightjs  language=\"python\" :autodetect=\"false\" :code=\"code15\"  v-show=\"v15\"></highlightjs>\r\n    </el-card>\r\n\r\n    <el-card style=\"max-width: 1200px\"><template #header><strong>SLAM建图</strong></template>\r\n        前面的几步中已经会了获取激光雷达数据和自定义地图。激光雷达发布雷达数据话题/scan，SLAM节点订阅→SLAM节点发布地图话题/map，Rviz订阅→RViz中呈现<br/>\r\n        这个SLAM节点有很多种<br/>\r\n        1、Hector_Mapping<br/>\r\n        自带节点启动Hector_Mapping：<br/>\r\n        在~里执行sudo apt install ros-noetic-hector-mapping→~里运行roslaunch wpr_simulation wpb_stage_slam.launch<br/>\r\n        →~里运行rosrun hector_mapping hector_mapping→启动rviz→add一个robotmodel和laserscan→laserscan的topic改为/scan→add一个map→topic设为map<br/>\r\n        接下来让机器人动起来，扫描全部的环境：<br/>\r\n        ~里执行rosrun rqt_robot_steering rqt_robot_steering→纵轴控制速度，横轴控制旋转<br/>\r\n        launch文件启动Hector_Mapping：<br/>\r\n        roscpp rospy std_msgs建包→建文件夹launch→xxxx.launch→先编译一下→roslaunch slam_pkg hector.launch<br/><br/><br/>\r\n        保存rviz配置：<br/>\r\n        file→save config→建个文件夹xxx→写入名称yyy.rviz，回车（不行的话给一下文件夹修改权限）→在launch的第三个node改为<highlightjs  language=\"python\" :autodetect=\"false\" :code=\"code17\"  v-show=\"v17\"></highlightjs>\r\n        →再编译并roslaunch slam_pkg hector.launch<br/>\r\n        xxxx.launch代码：<br/><el-button type=\"primary\" size=\"default\"  @click=\"if(v16==false)v16=true;else v16=false;\" plain>代码</el-button><br/>\r\n        <highlightjs  language=\"python\" :autodetect=\"false\" :code=\"code16\"  v-show=\"v16\"></highlightjs>\r\n\r\n    </el-card>\r\n</template>\r\n    <script setup>\r\n    import useClipboard from 'vue-clipboard3';\r\n    import { ElNotification } from \"element-plus\";\r\nimport { ref } from 'vue';\r\nvar v1=ref(false)\r\nvar v2=ref(false)\r\nvar v3=ref(false)\r\nvar v4=ref(false)\r\nvar v5=ref(false)\r\nvar v6=ref(false)\r\nvar v7=ref(false)\r\nvar v8=ref(false)\r\nvar v9=ref(false)\r\nvar v10=ref(false)\r\nvar v11=ref(false)\r\nvar v12=ref(false)\r\nvar v13=ref(false)\r\nvar v14=ref(false)\r\nvar v15=ref(false)\r\nvar v16=ref(false)\r\nvar v17=ref(false)\r\nvar v18=ref(false)\r\nvar v19=ref(false)\r\n\r\nvar code1=`#include<ros/ros.h>\r\n#include<geometry_msgs/Twist.h>\r\n\r\nint main(int argc, char  *argv[])\r\n{\r\n    ros::init(argc,argv,\"vel_node\");\r\n    ros::NodeHandle n;\r\n    ros::Publisher vel_pub=n.advertise<geometry_msgs::Twist>(\"/cmd_vel\",10);\r\n    geometry_msgs::Twist vel_msg;\r\n    vel_msg.linear.x=0.1;\r\n    vel_msg.linear.y=0;\r\n    vel_msg.linear.z=0;\r\n    vel_msg.angular.x=0;\r\n    vel_msg.angular.y=0;\r\n    vel_msg.angular.z=0;\r\n\r\n    ros::Rate r(30);\r\n    while (ros::ok())\r\n    {\r\n        vel_pub.publish(vel_msg);\r\n        r.sleep();\r\n    }\r\n    \r\n    return 0;\r\n}\r\n`\r\nvar code2=`#!/usr/bin/env python3\r\n#coding=utf-8\r\nimport rospy\r\nfrom geometry_msgs.msg import Twist\r\nif __name__==\"__main__\":\r\n    rospy.init_node(\"vel_node_p\")\r\n\r\n    vel_pub=rospy.Publisher(\"cmd_vel\",Twist,queue_size=10)\r\n\r\n    vel_msg=Twist()\r\n    vel_msg.linear.x=0.1\r\n    rate=rospy.Rate(30)\r\n    while not rospy.is_shutdown():\r\n        vel_pub.publish(vel_msg)\r\n        rate.sleep()`\r\nvar code3=`#include<ros/ros.h>\r\n#include<sensor_msgs/LaserScan.h>\r\nvoid LidarCallback(const sensor_msgs::LaserScan msg){\r\n    float fMidDist = msg.ranges[180];\r\n    ROS_INFO(\"前方测距 ranges[180]=%f米\",fMidDist);\r\n}\r\n\r\n\r\nint main(int argc, char  *argv[])\r\n{\r\n    setlocale(LC_ALL,\"\");\r\n    ros::init(argc,argv,\"lidar_node\");\r\n    ros::NodeHandle n;\r\n    ros::Subscriber lidar_sub = n.subscribe(\"/scan\",10,&LidarCallback);\r\n    ros::spin();\r\n    return 0;\r\n}`\r\nvar code4=`#!/usr/bin/env python3\r\n#coding=utf-8\r\nimport rospy\r\nfrom sensor_msgs.msg import LaserScan\r\n\r\ndef LidarCallback(msg):\r\n    dist=msg.ranges[180]\r\n    rospy.loginfo(\"前方测距ranges[180]=%f米\",dist)\r\n\r\n\r\nif __name__==\"__main__\":\r\n    rospy.init_node(\"liadr_node\")\r\n    lidar_sub=rospy.Subscriber(\"/scan\",LaserScan,LidarCallback,queue_size=10)\r\n    rospy.spin()`\r\nvar code5=`#include<ros/ros.h>\r\n#include<sensor_msgs/LaserScan.h>\r\n#include<geometry_msgs/Twist.h>\r\nint nCount=50;\r\nros::Publisher vel_pub;\r\nvoid LidarCallback(const sensor_msgs::LaserScan msg){\r\n    float fMidDist = msg.ranges[180];\r\n    ROS_INFO(\"前方测距 ranges[180]=%f米\",fMidDist);\r\n    if(nCount>0){\r\n        nCount--;\r\n        return;\r\n    }\r\n    geometry_msgs::Twist vel_cmd;\r\n    if(fMidDist<1.5){\r\n        vel_cmd.angular.z=0.3;\r\n        nCount=50;\r\n    }\r\n    else{\r\n        vel_cmd.linear.x=0.1;\r\n    }\r\n    vel_pub.publish(vel_cmd);\r\n}\r\n\r\n\r\nint main(int argc, char  *argv[])\r\n{\r\n    setlocale(LC_ALL,\"\");\r\n    ros::init(argc,argv,\"lidar_node\");\r\n    ros::NodeHandle n;\r\n    ros::Subscriber lidar_sub = n.subscribe(\"/scan\",10,&LidarCallback);\r\n    vel_pub = n.advertise<geometry_msgs::Twist>(\"/cmd_vel\",10);\r\n    ros::spin();\r\n    return 0;\r\n}`\r\nvar code6=`#!/usr/bin/env python3\r\n#coding=utf-8\r\nimport rospy\r\nfrom sensor_msgs.msg import LaserScan\r\nfrom geometry_msgs.msg import Twist\r\n\r\ncount=0\r\ndef LidarCallback(msg):\r\n    global vel_pub#将vel_pub声明为全局变量\r\n    global count\r\n    dist=msg.ranges[180]\r\n    rospy.loginfo(\"前方测距ranges[180]=%f米\",dist)\r\n    vel_cmd=Twist()\r\n\r\n    if count>0:\r\n        count=count-1\r\n        return\r\n    if dist<1.5:\r\n        vel_cmd.angular.z=0.3\r\n        count=50\r\n    else:\r\n        vel_cmd.linear.x=0.05\r\n    vel_pub.publish(vel_cmd)\r\n    \r\n\r\n\r\nif __name__==\"__main__\":\r\n    rospy.init_node(\"liadr_node\")\r\n    lidar_sub=rospy.Subscriber(\"/scan\",LaserScan,LidarCallback,queue_size=10)\r\n    vel_pub= rospy.Publisher(\"/cmd_vel\",Twist,queue_size=10);\r\n    rospy.spin()`\r\nvar code7=`#include<ros/ros.h>\r\n#include \"sensor_msgs/Imu.h\"\r\n#include \"tf/tf.h\"\r\nvoid ImuCallback(sensor_msgs::Imu msg){\r\n    if(msg.orientation_covariance[0]<0)\r\n    return;\r\n    tf::Quaternion quaternion(\r\n        msg.orientation.x,\r\n        msg.orientation.y,\r\n        msg.orientation.z,\r\n        msg.orientation.w\r\n    );\r\n    double roll,pitch,yaw;\r\n    tf::Matrix3x3(quaternion).getRPY(roll,pitch,yaw);\r\n    roll=roll*180/M_PI;\r\n    pitch=pitch*180/M_PI;\r\n    yaw=yaw*180/M_PI;\r\n    ROS_INFO(\"翻滚=%.0f  俯仰角=%.0f  朝向=%.0f\",roll,pitch,yaw);\r\n}   \r\n\r\n\r\nint main(int argc, char  *argv[])\r\n{\r\n    setlocale(LC_ALL,\"\");\r\n    ros::init(argc,argv,\"imu_node\");\r\n    ros::NodeHandle n;\r\n    ros::Subscriber lidar_sub = n.subscribe(\"/imu/data\",10,ImuCallback);\r\n    ros::spin();\r\n    return 0;\r\n}`\r\nvar code8=`#!/usr/bin/env python3\r\n#coding=utf-8\r\n\r\nimport rospy\r\nfrom sensor_msgs.msg import Imu\r\nfrom tf.transformations import euler_from_quaternion\r\nimport math\r\n\r\ndef imu_callback(msg):\r\n    if msg.orientation_covariance[0]<0:\r\n        return\r\n    \r\n    quaternion={\r\n        msg.orientation.x,\r\n        msg.orientation.y,\r\n        msg.orientation.z,\r\n        msg.orientation.w\r\n    }\r\n    (roll,pitch,yaw)=euler_from_quaternion(quaternion)\r\n    roll=roll*180/math.pi\r\n    pitch=pitch*180/math.pi\r\n    yaw=yaw*180/math.pi\r\n    rospy.loginfo(\"翻滚=%.0f  俯仰角=%.0f  朝向=%.0f\",roll,pitch,yaw)\r\n\r\n\r\nif __name__==\"__main__\":\r\n    rospy.init_node(\"imu_node_p\")\r\n    imu_sub=rospy.Subscriber(\"/imu/data\",Imu,imu_callback,queue_size=10)\r\n    rospy.spin()`\r\nvar code9=`\r\n#include \"ros/ros.h\"\r\n#include \"sensor_msgs/Imu.h\"\r\n#include \"tf/tf.h\"\r\n#include \"geometry_msgs/Twist.h\"\r\n\r\n// 速度消息发布对象（全局变量）\r\nros::Publisher vel_pub;\r\n\r\n// IMU 回调函数\r\nvoid IMUCallback(const sensor_msgs::Imu msg)\r\n{\r\n    // 检测消息包中四元数数据是否存在\r\n    if(msg.orientation_covariance[0] < 0)\r\n        return;\r\n    // 四元数转成欧拉角\r\n    tf::Quaternion quaternion(\r\n        msg.orientation.x,\r\n        msg.orientation.y,\r\n        msg.orientation.z,\r\n        msg.orientation.w\r\n    );\r\n    double roll, pitch, yaw;\r\n    tf::Matrix3x3(quaternion).getRPY(roll, pitch, yaw);\r\n    // 弧度换算成角度\r\n    roll = roll*180/M_PI;\r\n    pitch = pitch*180/M_PI;\r\n    yaw = yaw*180/M_PI;\r\n    ROS_INFO(\"滚转= %.0f 俯仰= %.0f 朝向= %.0f\", roll, pitch, yaw);\r\n    // 速度消息包\r\n    geometry_msgs::Twist vel_cmd;\r\n    // 目标朝向角\r\n    double target_yaw = 90;\r\n    // 计算速度\r\n    double diff_angle = target_yaw - yaw;\r\n    vel_cmd.angular.z = diff_angle * 0.01;\r\n    vel_cmd.linear.x = 0.1;\r\n    vel_pub.publish(vel_cmd);\r\n}\r\n\r\nint main(int argc, char **argv)\r\n{\r\n    setlocale(LC_ALL, \"\");\r\n    ros::init(argc,argv, \"demo_imu_behavior\"); \r\n\r\n    ros::NodeHandle n;\r\n    // 订阅 IMU 的数据话题\r\n    ros::Subscriber sub = n.subscribe(\"imu/data\", 100, IMUCallback);\r\n    // 发布速度控制话题\r\n    vel_pub = n.advertise<geometry_msgs::Twist>(\"/cmd_vel\",10);\r\n    ros::spin();\r\n\r\n    return 0;\r\n}\r\n`\r\nvar code10=`#!/usr/bin/env python3\r\n# coding=utf-8\r\n\r\nimport rospy\r\nfrom sensor_msgs.msg import Imu\r\nfrom tf.transformations import euler_from_quaternion\r\nimport math\r\nfrom geometry_msgs.msg import Twist\r\n\r\n# IMU 回调函数\r\ndef imu_callback(msg):\r\n    if msg.orientation_covariance[0] < 0:\r\n        return\r\n    # 四元数转成欧拉角\r\n    quaternion = [\r\n        msg.orientation.x,\r\n        msg.orientation.y,\r\n        msg.orientation.z,\r\n        msg.orientation.w\r\n    ]\r\n    (roll,pitch,yaw) = euler_from_quaternion(quaternion)\r\n    # 弧度换算成角度\r\n    roll = roll*180/math.pi\r\n    pitch = pitch*180/math.pi\r\n    yaw = yaw*180/math.pi\r\n    rospy.loginfo(\"滚转= %.0f 俯仰= %.0f 朝向= %.0f\", roll, pitch, yaw)\r\n    # 速度消息包\r\n    vel_cmd = Twist()\r\n    # 目标朝向角\r\n    target_yaw = 90\r\n    # 计算速度\r\n    diff_angle = target_yaw - yaw\r\n    vel_cmd.angular.z = diff_angle * 0.01\r\n    vel_cmd.linear.x = 0.1\r\n    global vel_pub\r\n    vel_pub.publish(vel_cmd)\r\n\r\n# 主函数\r\nif __name__ == \"__main__\":\r\n    rospy.init_node(\"imu_behavior\")\r\n    # 订阅 IMU 的数据话题\r\n    imu_sub = rospy.Subscriber(\"/imu/data\",Imu,imu_callback,queue_size=10)\r\n    # 发布机器人运动控制话题\r\n    vel_pub = rospy.Publisher(\"cmd_vel\",Twist,queue_size=10)\r\n    rospy.spin()`\r\nvar code11=`string grade\r\nint64 star\r\nstring data`\r\nvar code12=`# include <iostream>\r\n# include <ros/ros.h>\r\n# include <nav_msgs/OccupancyGrid.h>\r\n\r\nint main(int argc, char** argv)\r\n{\r\n    ros::init(argc, argv, \"demo_map_pub\");\r\n\r\n    ros::NodeHandle n;\r\n    ros::Publisher pub = n.advertise<nav_msgs::OccupancyGrid>(\"/map\", 10);\r\n\r\n    ros::Rate r(1);\r\n    while (ros::ok())\r\n    {\r\n        nav_msgs::OccupancyGrid msg;\r\n        // header\r\n        msg.header.frame_id = \"map\";\r\n        msg.header.stamp = ros::Time::now();\r\n        // 地图描述信息\r\n        //下面两行是坐标系关于地图的偏移\r\n        msg.info.origin.position.x = 0;\r\n        msg.info.origin.position.y = 0;\r\n        msg.info.resolution = 1.0;//分辨率（单元格的边长，单位：米）\r\n        msg.info.width = 4;//地图长度（单位：栅格列数）\r\n        msg.info.height = 2;//地图高度（单位：栅格行数）\r\n        // 地图数据\r\n        msg.data.resize(4*2);\r\n        //地图赋值\r\n        msg.data[0] = 100;\r\n        msg.data[1] = 100;\r\n        msg.data[2] = 0;\r\n        msg.data[3] = -1;\r\n        // 发送\r\n        pub.publish(msg);\r\n        r.sleep();\r\n    }\r\n    \r\n    return 0;\r\n}`\r\nvar code13=` #include \"ros/ros.h\"\r\n#include \"msgs_test/Person.h\"\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    setlocale(LC_ALL,\"\");\r\n    ROS_INFO(\"这是发布消息方\");\r\n    ros::init(argc,argv,\"talker_person\");\r\n    ros::NodeHandle nh;\r\n    ros::Publisher pub = nh.advertise<msgs_test::Person>(\"liaotian\",10);\r\n    msgs_test::Person p;\r\n    p.name = \"张三\";\r\n    p.height = 1.73;\r\n    p.age = 1;\r\n    ros::Rate r(1);\r\n    while (ros::ok())\r\n    {\r\n        pub.publish(p);\r\n        p.age += 1;\r\n        ROS_INFO(\"我叫:%s,今年%d岁,高%.2f米\", p.name.c_str(), p.age, p.height);\r\n        r.sleep();\r\n        ros::spinOnce();\r\n    }\r\n    return 0;\r\n}`\r\nvar code14=`#include \"ros/ros.h\"\r\n#include \"std_msgs/String.h\"\r\n#include<sstream>\r\n#include\"msgs_test/Person.h\"\r\n\r\nvoid doPerson(const msgs_test::Person::ConstPtr &person){\r\n    ROS_INFO(\"%s,%d,%.f\",person->name.c_str(),person->age,person->height);\r\n}\r\nint main(int argc,char *argv[]){\r\n    setlocale(LC_ALL,\"\");\r\n    ROS_INFO(\"订阅方实现\");\r\n    ros::init(argc,argv,\"jiaZhang\");\r\n    ros::NodeHandle nh;\r\n    ros::Subscriber sub = nh.subscribe(\"liaotian\",10,doPerson);\r\n    ros::spin();\r\n    return 0;\r\n}`\r\nvar code15=`#!/usr/bin/env python3\r\n# coding=utf-8\r\n\r\nimport rospy\r\nfrom nav_msgs.msg import OccupancyGrid\r\n\r\nif __name__ == \"__main__\":\r\n    rospy.init_node(\"demo_map_pub\")\r\n    # 发布地图话题/map\r\n    pub = rospy.Publisher(\"/map\",OccupancyGrid,queue_size=10)\r\n    # 构建发送频率对象\r\n    rate = rospy.Rate(1)\r\n    while not rospy.is_shutdown():\r\n        # 构建地图消息包并赋值\r\n        msg = OccupancyGrid()\r\n        # header\r\n        msg.header.frame_id = \"map\"#坐标系\r\n        msg.header.stamp = rospy.Time.now()\r\n        # 地图描述信息\r\n        msg.info.origin.position.x = 0\r\n        msg.info.origin.position.y = 0\r\n        msg.info.resolution = 1.0\r\n        msg.info.width = 4\r\n        msg.info.height = 2\r\n        # 地图数据\r\n        msg.data = [0]*4*2\r\n        msg.data[0] = 100\r\n        msg.data[1] = 100\r\n        msg.data[2] = 0\r\n        msg.data[3] = -1\r\n        pub.publish(msg)\r\n        rate.sleep()`\r\nvar code16=`<launch>\r\n\r\n<include file=\"$(find wpr_simulation)/launch/wpb_stage_slam.launch\"/>\r\n<node pkg=\"hector_mapping\" type=\"hector_mapping\" name=\"hector_mapping\"/>\r\n<node pkg=\"rviz\" type=\"rviz\" name=\"rviz\"/>\r\n<node pkg=\"rqt_robot_steering\" type=\"rqt_robot_steering\" name=\"rqt_robot_steering\"/>\r\n\r\n</launch>`\r\nvar code17=`<node pkg=\"rviz\" type=\"rviz\" name=\"rviz\" args=\"-d $(find slam_pkg)/rviz/yyy.rviz\"/>`\r\nvar code18=``\r\nvar code19=``\r\nvar code20=``\r\n\r\nconst succeed = () => {\r\n  ElNotification({\r\n    title: \"复制成功\",\r\n    message: \"\",\r\n    type: \"success\",\r\n    position: 'top-left'\r\n  });\r\n};  \r\nconst { toClipboard } = useClipboard();\r\n    /*\r\n    * 点击的方法\r\n    * @item 需要复制的内容\r\n    */\r\n    const copyClick = async item => {\r\n      try {\r\n        await toClipboard(item);\r\n        succeed()\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\nvar c1 = `~/catkin_ws/src`;\r\nvar c2 = `git clone https://github.com/6-robot/wpr_simulation.git`;\r\nvar c3 = `~/catkin_ws/src/wpr_simulation/scripts`;\r\nvar c4 = `./install_for_noetic.sh`;\r\nvar c5 = `catkin_ws`;\r\nvar c6 = `catkin_make,source devel/setup.bash`;\r\nvar c7 = `roslaunch wpr_simulation wpb_simple.launch`;\r\nvar c8 = `rosrun wpr_simulation demo_vel_ctrl`;\r\nvar c9 = `catkin_ws/src`;\r\nvar c10 = `catkin_create_pkg vel_pkg roscpp rospy geometry_msgs`;\r\nvar c12 = `roslaunch wpr_simulation wpb_simple.launch`;\r\nvar c13 = `rosrun vel_pkg vel_node`;\r\nvar c15 = `~/`;\r\nvar c16 = `roslaunch wpr_simulation wpb_simple.launch`;\r\nvar c17 = `rviz`;\r\nvar c18 = `roslaunch wpr_simulation wpb_simple.launch`;\r\nvar c19 = `catkin_make、source`;\r\n\r\n    </script>\r\n    <style  scoped>\r\n    </style>","import script from \"./move.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./move.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n    <el-card style=\"max-width: 1200px\">\r\n      <template #header><strong>建立pcl并且能运行</strong></template>\r\n      \r\n      建立一个ros节点，依赖：roscpp rospy sensor_msgs std_msgs（好像是）<br/>\r\n      进入节点→建立和小src同级的目录build→在与小src同级的cmakelists中编辑，主要内容：<br/><el-button type=\"primary\" size=\"default\"  @click=\"if(v2==false)v2=true;else v2=false;\" plain>代码</el-button><br/>\r\n      <highlightjs  language=\"python\" :autodetect=\"false\" :code=\"code2\"  v-show=\"v2\"></highlightjs><br/>\r\n      我的：<br/><el-button type=\"primary\" size=\"default\"  @click=\"if(v3==false)v3=true;else v3=false;\" plain>代码</el-button><br/>\r\n      <highlightjs  language=\"python\" :autodetect=\"false\" :code=\"code3\"  v-show=\"v3\"></highlightjs><br/>\r\n      src下建主要内容的示例文件test.cpp文件：<br/><el-button type=\"primary\" size=\"default\"  @click=\"if(v4==false)v4=true;else v4=false;\" plain>代码</el-button><br/>\r\n      <highlightjs  language=\"python\" :autodetect=\"false\" :code=\"code4\"  v-show=\"v4\"></highlightjs><br/>\r\n      或者是我的cpp（此代码用于雷达信息接受）：<br/><el-button type=\"primary\" size=\"default\"  @click=\"if(v5==false)v5=true;else v5=false;\" plain>代码</el-button><br/>\r\n      <highlightjs  language=\"python\" :autodetect=\"false\" :code=\"code5\"  v-show=\"v5\"></highlightjs><br/>\r\n      如果是主要内容示例文件cd build→cmake ..→make→./TEST<br/>\r\n      如果是我的代码：cd build→cmake ..→make→cd catkin_ws（根工作空间）→catkin_make→source ./devel/setup.bash→rosrun lidar_pkg lidar_sub→进入rosbag所在目录→rosbag play second.bag，即可接收<br/>\r\n参考网页：<br/>\r\n<a href=\"https://blog.csdn.net/u012660296/article/details/132450862\" _target=\"blank\">PCL使用</a><br/>\r\n\r\n    </el-card>\r\n    </template>\r\n    <script setup>\r\n      import useClipboard from 'vue-clipboard3';\r\n    import { ElNotification } from \"element-plus\";\r\nimport { ref } from 'vue';\r\n    var code1=``\r\n    var code2=`cmake_minimum_required(VERSION 2.6)\r\nproject(TEST)\r\n\r\nfind_package(PCL REQUIRED)\r\n\r\ninclude_directories(DDDDD{PCL_INCLUDE_DIRS})\r\nlink_directories(DDDDD{PCL_LIBRARY_DIRS})\r\nadd_definitions(DDDDD{PCL_DEFINITIONS})\r\n\r\nadd_executable(TEST src/test.cpp)\r\n\r\ntarget_link_libraries (TEST DDDDD{PCL_LIBRARIES})\r\n\r\ninstall(TARGETS TEST RUNTIME DESTINATION bin)\r\n\r\n`\r\n    var code3=`cmake_minimum_required(VERSION 3.0.2)\r\nproject(lidar_pkg)\r\n\r\n## Compile as C++11, supported in ROS Kinetic and newer\r\n# add_compile_options(-std=c++11)\r\n\r\n## Find catkin macros and libraries\r\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\r\n## is used, also find other catkin packages\r\nfind_package(catkin REQUIRED COMPONENTS\r\n  roscpp\r\n  rospy\r\n  sensor_msgs\r\n)\r\nfind_package(PCL REQUIRED)\r\n\r\n## System dependencies are found with CMake's conventions\r\n# find_package(Boost REQUIRED COMPONENTS system)\r\n\r\n\r\n## Uncomment this if the package has a setup.py. This macro ensures\r\n## modules and global scripts declared therein get installed\r\n## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html\r\n# catkin_python_setup()\r\n\r\n################################################\r\n## Declare ROS messages, services and actions ##\r\n################################################\r\n\r\n## To declare and build messages, services or actions from within this\r\n## package, follow these steps:\r\n## * Let MSG_DEP_SET be the set of packages whose message types you use in\r\n##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).\r\n## * In the file package.xml:\r\n##   * add a build_depend tag for \"message_generation\"\r\n##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET\r\n##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in\r\n##     but can be declared for certainty nonetheless:\r\n##     * add a exec_depend tag for \"message_runtime\"\r\n## * In this file (CMakeLists.txt):\r\n##   * add \"message_generation\" and every package in MSG_DEP_SET to\r\n##     find_package(catkin REQUIRED COMPONENTS ...)\r\n##   * add \"message_runtime\" and every package in MSG_DEP_SET to\r\n##     catkin_package(CATKIN_DEPENDS ...)\r\n##   * uncomment the add_*_files sections below as needed\r\n##     and list every .msg/.srv/.action file to be processed\r\n##   * uncomment the generate_messages entry below\r\n##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)\r\n\r\n## Generate messages in the 'msg' folder\r\n# add_message_files(\r\n#   FILES\r\n#   Message1.msg\r\n#   Message2.msg\r\n# )\r\n\r\n## Generate services in the 'srv' folder\r\n# add_service_files(\r\n#   FILES\r\n#   Service1.srv\r\n#   Service2.srv\r\n# )\r\n\r\n## Generate actions in the 'action' folder\r\n# add_action_files(\r\n#   FILES\r\n#   Action1.action\r\n#   Action2.action\r\n# )\r\n\r\n## Generate added messages and services with any dependencies listed here\r\n# generate_messages(\r\n#   DEPENDENCIES\r\n#   sensor_msgs\r\n# )\r\n\r\n################################################\r\n## Declare ROS dynamic reconfigure parameters ##\r\n################################################\r\n\r\n## To declare and build dynamic reconfigure parameters within this\r\n## package, follow these steps:\r\n## * In the file package.xml:\r\n##   * add a build_depend and a exec_depend tag for \"dynamic_reconfigure\"\r\n## * In this file (CMakeLists.txt):\r\n##   * add \"dynamic_reconfigure\" to\r\n##     find_package(catkin REQUIRED COMPONENTS ...)\r\n##   * uncomment the \"generate_dynamic_reconfigure_options\" section below\r\n##     and list every .cfg file to be processed\r\n\r\n## Generate dynamic reconfigure parameters in the 'cfg' folder\r\n# generate_dynamic_reconfigure_options(\r\n#   cfg/DynReconf1.cfg\r\n#   cfg/DynReconf2.cfg\r\n# )\r\n\r\n###################################\r\n## catkin specific configuration ##\r\n###################################\r\n## The catkin_package macro generates cmake config files for your package\r\n## Declare things to be passed to dependent projects\r\n## INCLUDE_DIRS: uncomment this if your package contains header files\r\n## LIBRARIES: libraries you create in this project that dependent projects also need\r\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\r\n## DEPENDS: system dependencies of this project that dependent projects also need\r\ncatkin_package(\r\n#  INCLUDE_DIRS include\r\n#  LIBRARIES lidar_pkg\r\n#  CATKIN_DEPENDS roscpp rospy sensor_msgs\r\n#  DEPENDS system_lib\r\n)\r\n\r\n###########\r\n## Build ##\r\n###########\r\n\r\n## Specify additional locations of header files\r\n## Your package locations should be listed before other locations\r\ninclude_directories(\r\n# include\r\n  DDDDD{catkin_INCLUDE_DIRS}\r\n  DDDDD{PCL_INCLUDE_DIRS}\r\n  /usr/include/pcl-1.10\r\n)\r\nlink_directories(DDDDD{PCL_LIBRARY_DIRS})\r\nadd_definitions(DDDDD{PCL_DEFINITIONS})\r\n## Declare a C++ library\r\n# add_library(DDDDD{PROJECT_NAME}\r\n#   src/DDDDD{PROJECT_NAME}/lidar_pkg.cpp\r\n# )\r\n\r\n## Add cmake target dependencies of the library\r\n## as an example, code may need to be generated before libraries\r\n## either from message generation or dynamic reconfigure\r\n# add_dependencies(DDDDD{PROJECT_NAME} DDDDD{DDDDD{PROJECT_NAME}_EXPORTED_TARGETS} DDDDD{catkin_EXPORTED_TARGETS})\r\n\r\n## Declare a C++ executable\r\n## With catkin_make all packages are built within a single CMake context\r\n## The recommended prefix ensures that target names across packages don't collide\r\nadd_executable(lidar_node src/lidar_node.cpp)\r\nadd_executable(imu_node src/imu_node.cpp)\r\nadd_executable(lidar_sub src/lidar_sub.cpp)\r\ntarget_link_libraries (lidar_sub DDDDD{PCL_LIBRARIES})\r\n## Rename C++ executable without prefix\r\n## The above recommended prefix causes long target names, the following renames the\r\n## target back to the shorter version for ease of user use\r\n## e.g. \"rosrun someones_pkg node\" instead of \"rosrun someones_pkg someones_pkg_node\"\r\n# set_target_properties(DDDDD{PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX \"\")\r\n\r\n## Add cmake target dependencies of the executable\r\n## same as for the library above\r\nadd_dependencies(lidar_node DDDDD{DDDDD{PROJECT_NAME}_EXPORTED_TARGETS} DDDDD{catkin_EXPORTED_TARGETS})\r\nadd_dependencies(imu_node DDDDD{DDDDD{PROJECT_NAME}_EXPORTED_TARGETS} DDDDD{catkin_EXPORTED_TARGETS})\r\nadd_dependencies(lidar_sub DDDDD{DDDDD{PROJECT_NAME}_EXPORTED_TARGETS} DDDDD{catkin_EXPORTED_TARGETS})\r\n\r\n## Specify libraries to link a library or executable target against\r\ntarget_link_libraries(lidar_node\r\n  DDDDD{catkin_LIBRARIES}\r\n)\r\ntarget_link_libraries(imu_node\r\n  DDDDD{catkin_LIBRARIES}\r\n)\r\ntarget_link_libraries(lidar_sub\r\nDDDDD{PCL_LIBRARIES}\r\nDDDDD{catkin_LIBRARIES}\r\n-lX11\r\n)\r\n#############\r\n## Install ##\r\n#############\r\ninstall(TARGETS lidar_sub RUNTIME DESTINATION bin)\r\n\r\n# all install targets should use catkin DESTINATION variables\r\n# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html\r\n\r\n## Mark executable scripts (Python etc.) for installation\r\n## in contrast to setup.py, you can choose the destination\r\ncatkin_install_python(PROGRAMS\r\n  scripts/lidar_node.py\r\n  scripts/imu_node.py\r\n  DESTINATION DDDDD{CATKIN_PACKAGE_BIN_DESTINATION}\r\n)\r\n\r\n## Mark executables for installation\r\n## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html\r\n# install(TARGETS DDDDD{PROJECT_NAME}_node\r\n#   RUNTIME DESTINATION DDDDD{CATKIN_PACKAGE_BIN_DESTINATION}\r\n# )\r\n\r\n## Mark libraries for installation\r\n## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html\r\n# install(TARGETS DDDDD{PROJECT_NAME}\r\n#   ARCHIVE DESTINATION DDDDD{CATKIN_PACKAGE_LIB_DESTINATION}\r\n#   LIBRARY DESTINATION DDDDD{CATKIN_PACKAGE_LIB_DESTINATION}\r\n#   RUNTIME DESTINATION DDDDD{CATKIN_GLOBAL_BIN_DESTINATION}\r\n# )\r\n\r\n## Mark cpp header files for installation\r\n# install(DIRECTORY include/DDDDD{PROJECT_NAME}/\r\n#   DESTINATION DDDDD{CATKIN_PACKAGE_INCLUDE_DESTINATION}\r\n#   FILES_MATCHING PATTERN \"*.h\"\r\n#   PATTERN \".svn\" EXCLUDE\r\n# )\r\n\r\n## Mark other files for installation (e.g. launch and bag files, etc.)\r\n# install(FILES\r\n#   # myfile1\r\n#   # myfile2\r\n#   DESTINATION DDDDD{CATKIN_PACKAGE_SHARE_DESTINATION}\r\n# )\r\n\r\n#############\r\n## Testing ##\r\n#############\r\n\r\n## Add gtest based cpp test target and link libraries\r\n# catkin_add_gtest(DDDDD{PROJECT_NAME}-test test/test_lidar_pkg.cpp)\r\n# if(TARGET DDDDD{PROJECT_NAME}-test)\r\n#   target_link_libraries(DDDDD{PROJECT_NAME}-test DDDDD{PROJECT_NAME})\r\n# endif()\r\n\r\n## Add folders to be run by python nosetests\r\n# catkin_add_nosetests(test)\r\n`\r\n    var code4=`#include <iostream>\r\n#include <pcl/common/common_headers.h>\r\n#include <pcl/io/pcd_io.h>\r\n#include <pcl/visualization/pcl_visualizer.h>\r\n#include <pcl/visualization/cloud_viewer.h>\r\n#include <pcl/console/parse.h>\r\n\r\nint main(int argc, char **argv) \r\n{\r\n    std::cout << \"Test PCL !!!\" << std::endl;\r\n    \r\n    pcl::PointCloud<pcl::PointXYZRGB>::Ptr point_cloud_ptr (new pcl::PointCloud<pcl::PointXYZRGB>);\r\n    uint8_t r(255), g(15), b(15);\r\n    for (float z(-1.0); z <= 1.0; z += 0.05)\r\n    {\r\n        for (float angle(0.0); angle <= 360.0; angle += 5.0)\r\n        {\r\n            pcl::PointXYZRGB point;\r\n            point.x = 0.5 * cosf (pcl::deg2rad(angle));\r\n            point.y = sinf (pcl::deg2rad(angle));\r\n            point.z = z;\r\n            uint32_t rgb = (static_cast<uint32_t>(r) << 16 |\r\n                            static_cast<uint32_t>(g) << 8 | static_cast<uint32_t>(b));\r\n            point.rgb = *reinterpret_cast<float*>(&rgb);\r\n            point_cloud_ptr->points.push_back (point);\r\n        }\r\n        if (z < 0.0)\r\n        {\r\n            r -= 12;\r\n            g += 12;\r\n        }\r\n        else\r\n        {\r\n            g -= 12;\r\n            b += 12;\r\n        }\r\n    }\r\n    point_cloud_ptr->width = (int) point_cloud_ptr->points.size ();\r\n    point_cloud_ptr->height = 1;\r\n   \r\n    pcl::visualization::PCLVisualizer::Ptr RGBViewer(new pcl::visualization::PCLVisualizer(\"3D Viewer\"));\r\n    pcl::visualization::PointCloudColorHandlerRGBField<pcl::PointXYZRGB> rgb(point_cloud_ptr); \r\n    RGBViewer->setBackgroundColor(0,0,0);\r\n    RGBViewer->addPointCloud<pcl::PointXYZRGB> (point_cloud_ptr,rgb,\"rgb cloud\");\r\n    RGBViewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE,1,\"rgb cloud\");\r\n    RGBViewer->addCoordinateSystem(1.0);\r\n    RGBViewer->initCameraParameters();\r\n\r\n    while (!RGBViewer->wasStopped())\r\n    {\r\n        RGBViewer->spin();\r\n    }\r\n    return 0;\r\n}\r\n`\r\n    var code5=`// #include \"ros/ros.h\"\r\n\r\n// int main(){\r\n\r\n// }\r\n#include \"ros/ros.h\"\r\n#include \"pcl/io/pcd_io.h\"\r\n#include \"pcl_conversions/pcl_conversions.h\"\r\n#include \"sensor_msgs/PointCloud2.h\"\r\n\r\nvoid doBag(const sensor_msgs::PointCloud2 &point){\r\n    pcl::PointCloud<pcl::PointXYZL> pcd;\r\n    pcl::fromROSMsg(point,pcd);\r\n    pcl::io::savePCDFileASCII(\"0.pcd\",pcd);\r\n    //   // 打印点云信息\r\n    // std::cout << \"Received point cloud with \" << pcd.points.size() << \" points.\" << std::endl;\r\n    \r\n    // // 示例：打印前5个点的信息\r\n    // for (size_t i = 0; i < std::min(size_t(5), pcd.points.size()); ++i) {\r\n    //     std::cout << \"Point \" << i << \": (\" << pcd.points[i].x << \", \" << pcd.points[i].y << \", \" << pcd.points[i].z << \")\" << std::endl;\r\n    // }\r\n}\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    setlocale(LC_ALL,\"\");\r\n    ros::init(argc,argv,\"volix_subscriber\");\r\n\r\n    pcl::PointCloud<pcl::PointXYZL>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZL>);\r\n    ros::NodeHandle nh;\r\n    ros::Subscriber sub = nh.subscribe(\"/livox/lidar\",10,doBag);\r\n    ros::spin();\r\n    return 0;\r\n}`\r\n    var code6=``\r\n    var code7=``\r\n    var code8=``\r\n    var code9=``\r\n    var v1=ref(false)\r\nvar v2=ref(false)\r\nvar v3=ref(false)\r\nvar v4=ref(false)\r\nvar v5=ref(false)\r\nvar v6=ref(false)\r\nvar v7=ref(false)\r\nvar v8=ref(false)\r\nvar v9=ref(false)\r\nvar v10=ref(false)\r\nvar v11=ref(false)\r\nvar v12=ref(false)\r\nvar v13=ref(false)\r\nvar v14=ref(false)\r\nvar v15=ref(false)\r\n    </script>\r\n    <style  scoped>\r\n    </style>","import script from \"./pcl.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./pcl.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { createRouter,createWebHashHistory } from \"vue-router\";\r\nimport learn from '../views/learn.vue'\r\nimport postlearn from '../views/postlearn.vue'\r\n// import dfs from '../components/learn/learn_alg/1_graph/dfs.vue'\r\n// import bfs from \"@/components/learn/learn_alg/1_graph/bfs.vue\";\r\n// import treeDfs from \"@/components/learn/learn_alg/2_tree/treeDfs.vue\";\r\n// import arrayNodes from \"@/components/learn/learn_alg/4_linkedNode/arrayNodes.vue\";\r\n// import heap_ops from \"@/components/learn/learn_alg/5_heap/heap_ops.vue\";\r\n// import ij from \"@/components/learn/learn_alg/alg/ij.vue\";\r\n// import stringHash from \"@/components/learn/learn_alg/alg/stringHash.vue\";\r\n// import trieTree from \"@/components/learn/learn_alg/alg/trieTree.vue\";\r\n// import unionFind from \"@/components/learn/learn_alg/alg/unionFind.vue\";\r\n// import window from \"@/components/learn/learn_alg/alg/window.vue\";\r\n// import quicksort from \"@/components/learn/learn_alg/3_sort/quicksort.vue\"\r\n// import mergesort from \"@/components/learn/learn_alg/3_sort/mergesort.vue\";\r\n// import vector from \"@/components/learn/toolAlgs/vector.vue\";\r\n// import deque from \"@/components/learn/toolAlgs/deque.vue\";\r\n// import map from \"@/components/learn/toolAlgs/map.vue\";\r\n// import memset from \"@/components/learn/toolAlgs/memset.vue\";\r\n// import pair from \"@/components/learn/toolAlgs/pair.vue\"\r\n// import set from \"@/components/learn/toolAlgs/set.vue\"\r\n// import second from \"@/views/second.vue\";\r\n// import decisionTree from \"@/components/learn/knowledge/ai/decisionTree.vue\";\r\n// import remender from \"@/components/learn/frontend/remender.vue\";\r\n// import webs from \"@/views/webs.vue\";\r\n// import stack from \"@/components/learn/arrayImitate/stack.vue\";\r\n// import queue from \"@/components/learn/arrayImitate/queue.vue\";\r\n// import hash from \"@/components/learn/arrayImitate/hash.vue\";\r\n// import linkedNodes from \"@/components/learn/arrayImitate/linkedNodes.vue\";\r\n// import strings from \"../components/learn/toolAlgs/strings.vue\"\r\n// import zhishu from \"../components/learn/learn_alg/0_often/zhishu.vue\"\r\n// import qianzhuihe from \"../components/learn/learn_alg/0_often/qianzhuihe.vue\"\r\n// import shaifa from \"../components/learn/learn_alg/0_often/shaifa.vue\"\r\n// import alg from \"../components/learn/learn_alg/0_often/alg.vue\"\r\n// import zuichanghuiwenVue from \"@/components/questions/zuichanghuiwen.vue\";\r\n// import questions from '../views/questions.vue'\r\n// import machine_learning from \"@/components/science/machine_learning.vue\";\r\n// import draw from \"@/components/science/draw.vue\"; \r\n// import science from '../views/science.vue'\r\n// import picRecognize from \"@/components/science/ai/picRecognize.vue\"; \r\n// import zzixingbianhuan from \"@/components/questions/2_zzixingbianhuan.vue\"\r\n// import divid from \"@/components/learn/learn_alg/alg/divid.vue\";\r\n// import sanshuzhihe from  \"@/components/questions/sanshuzhihe.vue\"\r\n// import zhongweishuwenti from  \"@/components/questions/zhongweishuwenti.vue\"\r\n// import aitrifiles from \"@/components/science/aitrifiles.vue\"; \r\n// import dfstemplate from \"@/components/questions/5_dfstemplate.vue\"\r\n// import hbase from \"@/components/postlearn/hbase/hbase.vue\"\r\n// import hbase_1start from \"@/components/postlearn/hbase/hbase_1start.vue\";\r\n// import hbase_base from \"@/components/postlearn/hbase/hbase_base.vue\";\r\n// import ogeintro from \"@/components/postlearn/oge/introduce.vue\";\r\n\r\n\r\n\r\nimport quick from \"@/components/postlearn/linux/quick.vue\";\r\nimport vpn from \"@/components/postlearn/linux/vpn.vue\";\r\nimport rosintro from \"@/components/postlearn/ros/intro.vue\";\r\nimport construce2 from \"@/components/postlearn/ros/construce2.vue\";\r\nimport construce from \"@/components/postlearn/ros/construce.vue\";\r\nimport operations from \"@/components/postlearn/ros/operations.vue\";\r\nimport roscases from \"@/components/postlearn/ros/roscases.vue\";\r\nimport rosreality from \"@/components/postlearn/ros/rosreality.vue\";\r\nimport move from  \"@/components/postlearn/ros/machine_ros/move.vue\";\r\nimport pcl from \"@/components/postlearn/ros/machine_ros/pcl.vue\";\r\n\r\nconst routes = [\r\n    // {path:'/learn',component:learn,children:[{path:'',component:dfs},{path:'dfs',component:dfs},{path:'mergesort',component:mergesort},{path:'quicksort',component:quicksort},\r\n    // {path:'bfs',component:bfs},{path:'treeDfs',component:treeDfs},{path:'arrayNodes',component:arrayNodes},{path:'heap_ops',component:heap_ops},\r\n    // {path:'ij',component:ij},{path:'stringHash',component:stringHash},{path:'trieTree',component:trieTree},{path:'unionFind',component:unionFind},\r\n    // {path:'window',component:window},{path:'vector',component:vector},{path:'deque',component:deque},{path:'memset',component:memset},\r\n    // {path:'pair',component:pair},{path:'map',component:map},{path:'set',component:set},{path:'unionFind',component:unionFind},\r\n    // {path:'decisionTree',component:decisionTree},{path:'remender',component:remender},{path:'strings',component:strings},\r\n    // {path:'stack',component:stack},{path:'queue',component:queue},{path:'hash',component:hash},{path:'linkedNodes',component:linkedNodes},\r\n    // {path:'zhishu',component:zhishu} ,{path:'qianzhuihe',component:qianzhuihe},{path:'shaifa',component:shaifa}, {path:'alg',component:alg},\r\n    // {path:'divid',component:divid}\r\n    // // ,{path:'queue',component:queue},\r\n    // // {path:'stack',component:stack},{path:'queue',component:queue},\r\n    // // {path:'stack',component:stack},{path:'queue',component:queue},\r\n    // // {path:'stack',component:stack},{path:'queue',component:queue},\r\n    // // {path:'stack',component:stack},{path:'queue',component:queue},\r\n    //   ]},{path:'/second',component:second,children:[{path:'',component:dfs}]},\r\n    {\r\n      path:'/',\r\n      redirect:'/postlearn/quick'\r\n    },\r\n  //   {path:'/webs',component:webs},\r\n  //   {path:'/questions',component:questions,children:[{path:'zuichanghuiwen',component:zuichanghuiwenVue},\r\n  //   {path:'sanshuzhihe',component:sanshuzhihe},\r\n  //   {path:'zhongweishuwenti',component:zhongweishuwenti},{path:'zzixingbianhuan',component:zzixingbianhuan}\r\n  //   ,{path:'dfstemplate',component:dfstemplate}\r\n  //   // ,{path:'zzixingbianhuan',component:zzixingbianhuan}\r\n  //   // ,{path:'zhongweishuwenti',component:zhongweishuwenti},{path:'zzixingbianhuan',component:zzixingbianhuan}\r\n  //   // ,{path:'zhongweishuwenti',component:zhongweishuwenti},{path:'zzixingbianhuan',component:zzixingbianhuan}\r\n  //   // ,{path:'zhongweishuwenti',component:zhongweishuwenti},{path:'zzixingbianhuan',component:zzixingbianhuan}\r\n  //   // ,{path:'zhongweishuwenti',component:zhongweishuwenti},{path:'zzixingbianhuan',component:zzixingbianhuan}\r\n  // ]},\r\n  //   {path:'/science',component:science,children:[{path:'machinelearning',component:machine_learning},{path:'draw',component:draw},\r\n  //   {path:'picRecognize',component:picRecognize},\r\n  //   {path:'aitrifiles',component:aitrifiles}\r\n  //   // {path:'picRecognize',component:picRecognize},\r\n  //   // {path:'picRecognize',component:picRecognize},{path:'picRecognize',component:picRecognize},{path:'picRecognize',component:picRecognize}\r\n  // ]}, \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  {path:'/postlearn',component:postlearn,children:[\r\n    // {path:'hbase',component:hbase},{path:'hbase_start',component:hbase_1start},\r\n  {path:'quick',component:quick},\r\n  // {path:'aitrifiles',component:aitrifiles},\r\n \r\n  {path:'rosintro',component:rosintro},\r\n  // {path:'hbasebase',component:hbase_base},\r\n  // {path:'ogeintro',component:ogeintro},\r\n  {path:'vpn',component:vpn},\r\n  {path:'construce',component:construce},\r\n  {path:'construce2',component:construce2},\r\n  {path:'roscases',component:roscases},\r\n  {path:'rosreality',component:rosreality},\r\n  {path:'operations',component:operations},\r\n  {path:'move',component:move},\r\n  {path:'pcl',component:pcl}\r\n\r\n\r\n  // {path:'picRecognize',component:picRecognize},{path:'picRecognize',component:picRecognize}\r\n]}\r\n  ]\r\n  const router = createRouter({\r\n     \r\n    history:createWebHashHistory(),\r\n    routes\r\n  })\r\n  export default router\r\n","import { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport ElementUI from 'element-plus'\nimport 'element-plus/theme-chalk/index.css'\nimport '../public/static/css/code.css'\nimport VueLatex from 'vatex'\n// highlight 的样式，依赖包，组件\nimport 'highlight.js/styles/atom-one-dark.css'\nimport 'highlight.js/lib/common'\nimport hljsVuePlugin from '@highlightjs/vue-plugin'\n\n// import  './static/live2dw/lib/L2Dwidget.min.js'\n//注册组件\nconst app = createApp(App)\napp.use(hljsVuePlugin)\napp.use(VueLatex)\napp.use(router)\napp.use(ElementUI)\n\n\napp.mount('#app')\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkBlog\"] = self[\"webpackChunkBlog\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(962); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["__exports__","ref","style","_createElementBlock","_hoisted_1","app","model","window","PIXI","mounted","view","this","$refs","liveCanvas","autoStart","resizeTo","backgroundAlpha","Live2DModel","from","stage","addChild","scale","set","internalModel","hitAreas","y","on","x","data","global","hitTest","console","log","expression","render","bac","document","body","scrollTop","documentElement","reactive","start","code","choose","se","cli","_createElementVNode","src","_imports_0","href","_target","_Fragment","_createVNode","_component_el_card","header","_withCtx","default","_createTextVNode","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_43","_hoisted_44","_hoisted_45","_hoisted_46","_hoisted_47","_hoisted_48","_hoisted_49","_hoisted_50","_hoisted_51","_hoisted_52","_hoisted_53","_hoisted_54","_hoisted_55","_hoisted_56","_hoisted_57","_hoisted_58","_hoisted_59","_hoisted_60","_hoisted_61","_hoisted_62","_hoisted_63","_hoisted_64","_hoisted_65","_hoisted_66","_hoisted_67","_hoisted_68","_hoisted_69","_hoisted_70","_hoisted_71","_hoisted_72","_hoisted_73","_","_hoisted_74","_hoisted_75","_hoisted_76","_hoisted_77","_hoisted_78","_hoisted_79","_hoisted_80","_hoisted_81","_hoisted_82","_hoisted_83","_hoisted_84","_hoisted_85","_hoisted_86","_hoisted_87","_hoisted_88","_hoisted_89","_hoisted_90","_hoisted_91","_hoisted_92","_hoisted_93","_hoisted_94","_hoisted_95","_hoisted_96","code1","code2","code3","code4","code5","code6","code7","_component_el_divider","code8","code9","code10","code11","code12","code13","code14","code15","code16","code17","code18","code19","code20","code21","code22","code23","code24","code25","code26","code27","code28","code29","code30","code31","v1","v2","v3","v4","v5","v6","v7","v8","v9","v10","v11","v12","v13","v14","v15","v16","v17","v18","v19","v20","v21","v22","v23","v24","v25","v26","v27","v28","v29","v30","v31","v32","succeed","ElNotification","title","message","type","position","toClipboard","useClipboard","copyClick","async","item","e","error","c1","c2","c3","c4","c5","c6","c7","c8","c9","c10","c12","c13","c15","c16","c17","c18","c19","routes","path","redirect","component","postlearn","children","quick","rosintro","vpn","construce","construce2","roscases","rosreality","operations","move","pcl","router","createRouter","history","createWebHashHistory","createApp","App","use","hljsVuePlugin","VueLatex","ElementUI","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","id","loaded","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","length","fulfilled","j","Object","keys","every","key","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","value","nmd","paths","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}